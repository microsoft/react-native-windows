{"version":3,"file":"beachball.config.js","sourceRoot":"","sources":["../src/beachball.config.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAEH,iDAAuC;AACvC,uEAAwE;AAKxE,MAAM,OAAO,GAAqB;IAChC,GAAG,OAAO,CAAC,yCAAyC,CAAC;IAErD,2EAA2E;IAC3E,6BAA6B;IAC7B,OAAO,EAAE,KAAK;IAEd,KAAK,EAAE;QACL,+CAA+C;QAC/C,QAAQ,EAAE,CAAC,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;YACxC,IAAI,IAAI,KAAK,sBAAsB,EAAE;gBACnC,OAAO,CAAC,GAAG,CAAC,wBAAwB,OAAO,EAAE,CAAC,CAAC;gBAC/C,IAAA,wBAAQ,EAAC,sBAAsB,OAAO,EAAE,CAAC,CAAC;aAC3C;QACH,CAAC;KACF;IAED,SAAS,EAAE;QACT,WAAW,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;YAC9D,CAAC,CAAC,EAAC,GAAG,UAAU,EAAE,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAC;YACvE,CAAC,CAAC,mBAAmB,CAAC,UAAwB,CAAC;KAChD;CACF,CAAA;AAED,SAAS,mBAAmB,CAAC,UAAsB;IACjD,OAAO;QACL,GAAG,UAAU;QACb,IAAI,EAAE,iBAAiB,CAAC,UAAU,CAAC;QACnC,OAAO,EAAE,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC;KAC3C,CAAC;AACJ,CAAC;AAGA,SAAS,iBAAiB,CAAC,UAAsB;IAC/C,6EAA6E;IAC7E,6EAA6E;IAC7E,WAAW;IACX,IAAI,UAAU,CAAC,IAAI,KAAK,YAAY,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;QAC7E,OAAO,OAAO,CAAC;KAChB;IAED,OAAO,UAAU,CAAC,IAAI,CAAC;AACzB,CAAC;AAED,SAAS,YAAY,CAAC,WAAmB;;IACvC,MAAM,WAAW,GAAG,MAAA,IAAA,mCAAmB,EAAC,WAAW,CAAC,0CAAE,IAAI,CAAC;IAC3D,OAAO,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED,SAAS,aAAa,CAAC,OAAe;;IACpC,gEAAgE;IAChE,OAAO,MAAA,MAAA,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,0CAAG,CAAC,CAAC,mCAAI,OAAO,CAAC;AACxE,CAAC;AAEF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * \n * @format\n */\n\nimport {execSync} from 'child_process';\nimport {findRepoPackageSync} from '@react-native-windows/package-utils';\n\nimport type {BeachballOptions} from 'beachball/lib/types/BeachballOptions';\nimport type {ChangeInfo} from 'beachball/lib/types/ChangeInfo';\n \nconst Options: BeachballOptions = {\n  ...require(\"@rnw-scripts/generated-beachball-config\"),\n   \n  // Do not generate tags for monorepo packages by default, to avoid a GitHub\n  // release for every package.\n  gitTags: false,\n\n  hooks: {\n    // Stamp versions when we publish a new package\n    postbump: (_packagePath, name, version) => {\n      if (name === 'react-native-windows') {\n        console.log(`Stamping RNW Version ${version}`);\n        execSync(`yarn stamp-version ${version}`);\n      }\n    }\n  },\n\n  transform: {\n    changeFiles: (changeInfo) => Array.isArray(changeInfo.changes)\n    ? {...changeInfo, changes: changeInfo.changes.map(transformChangeInfo)}\n    : transformChangeInfo(changeInfo as ChangeInfo),\n  }\n}\n\nfunction transformChangeInfo(changeInfo: ChangeInfo) : ChangeInfo {\n  return {\n    ...changeInfo,\n    type: correctChangeType(changeInfo),\n    comment: formatComment(changeInfo.comment),\n  };\n}\n\n \n function correctChangeType(changeInfo: ChangeInfo) {\n   // Changes made to our main branch are often rolled into prerelease packages,\n   // where a released branch should treat these changes as creating a new patch\n   // release.\n   if (changeInfo.type === 'prerelease' && !isPrerelease(changeInfo.packageName)) {\n     return 'patch';\n   }\n \n   return changeInfo.type;\n }\n \n function isPrerelease(packageName: string): boolean {\n   const packageJson = findRepoPackageSync(packageName)?.json;\n   return packageJson && packageJson.version.includes('-');\n }\n \n function formatComment(comment: string): string {\n   // Remove versions from messages that look like \"[0.xx] Message\"\n   return comment.match(/(\\s*\\[[\\d\\.]+\\]\\s*)?((.|\\n)*)/)?.[2] ?? comment;\n }\n\nmodule.exports = Options;\n"]}