// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cpp-app Hermes: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app Hermes: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>true</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>false</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>false</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app Hermes: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Folly\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Folly\\\\Folly.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"fmt\\", \\"..\\\\node_modules\\\\react-native-windows\\\\fmt\\\\fmt.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactCommon\\", \\"..\\\\node_modules\\\\react-native-windows\\\\ReactCommon\\\\ReactCommon.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Chakra\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative\\\\Microsoft.ReactNative.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Cxx\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Common\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Common\\\\Common.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactNative\\", \\"ReactNative\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Shared\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Mso\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Include\\", \\"..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SharedMSBuildProjectFiles) = preSolution
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
	EndGlobalSection
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.UI.Xaml\\" version=\\"2.7.0\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app Hermes: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;

exports[`cpp-app NuGet + Hermes: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app NuGet + Hermes: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>true</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>false</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>true</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app NuGet + Hermes: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative.Cxx\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.UI.Xaml\\" version=\\"2.7.0\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app NuGet + Hermes: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>true</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>true</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>true</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative.Cxx\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.WinUI\\" version=\\"3.0.0-preview4.210210.4\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app NuGet + WinUI3 + Hermes: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;

exports[`cpp-app NuGet + WinUI3: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app NuGet + WinUI3: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>false</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>true</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>true</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app NuGet + WinUI3: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative.Cxx\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.WinUI\\" version=\\"3.0.0-preview4.210210.4\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app NuGet + WinUI3: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;

exports[`cpp-app NuGet: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app NuGet: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>false</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>false</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>true</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app NuGet: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.ReactNative.Cxx.0.0.0-canary.409\\\\build\\\\native\\\\Microsoft.ReactNative.Cxx.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.ReactNative.Cxx\\" version=\\"0.0.0-canary.409\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.UI.Xaml\\" version=\\"2.7.0\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app NuGet: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;

exports[`cpp-app WinUI3 + Hermes: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>true</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>true</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>false</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Folly\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Folly\\\\Folly.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"fmt\\", \\"..\\\\node_modules\\\\react-native-windows\\\\fmt\\\\fmt.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactCommon\\", \\"..\\\\node_modules\\\\react-native-windows\\\\ReactCommon\\\\ReactCommon.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Chakra\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative\\\\Microsoft.ReactNative.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Cxx\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Common\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Common\\\\Common.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactNative\\", \\"ReactNative\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Shared\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Mso\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Include\\", \\"..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SharedMSBuildProjectFiles) = preSolution
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
	EndGlobalSection
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.WinUI\\" version=\\"3.0.0-preview4.210210.4\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app WinUI3 + Hermes: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;

exports[`cpp-app WinUI3: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app WinUI3: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>false</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>true</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>false</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app WinUI3: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Folly\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Folly\\\\Folly.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"fmt\\", \\"..\\\\node_modules\\\\react-native-windows\\\\fmt\\\\fmt.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactCommon\\", \\"..\\\\node_modules\\\\react-native-windows\\\\ReactCommon\\\\ReactCommon.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Chakra\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative\\\\Microsoft.ReactNative.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Cxx\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Common\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Common\\\\Common.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactNative\\", \\"ReactNative\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Shared\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Mso\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Include\\", \\"..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SharedMSBuildProjectFiles) = preSolution
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
	EndGlobalSection
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.WinUI\\" version=\\"3.0.0-preview4.210210.4\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app WinUI3: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;

exports[`cpp-app: metro.config.js 1`] = `
"/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */
const fs = require('fs');
const path = require('path');
const exclusionList = require('metro-config/src/defaults/exclusionList');

const rnwPath = fs.realpathSync(
  path.resolve(require.resolve('react-native-windows/package.json'), '..'),
);

module.exports = {
  resolver: {
    blockList: exclusionList([
      // This stops \\"react-native run-windows\\" from causing the metro server to crash if its already running
      new RegExp(
        \`\${path.resolve(__dirname, 'windows').replace(/[/\\\\\\\\]/g, '/')}.*\`,
      ),
      // This prevents \\"react-native run-windows\\" from hitting: EBUSY: resource busy or locked, open msbuild.ProjectImports.zip or other files produced by msbuild
      new RegExp(\`\${rnwPath}/build/.*\`),
      new RegExp(\`\${rnwPath}/target/.*\`),
      /.*\\\\.ProjectImports\\\\.zip/,
    ]),
  },
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};
"
`;

exports[`cpp-app: windows/ExperimentalFeatures.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">

  <!--
    This file contains some important settings that will apply globally for
    your app and *all* native modules your app consumes. These values were
    set when you created the app project, and in some cases cannot be
    simply changed here without recreating a new project.
  -->

  <PropertyGroup Label=\\"Microsoft.ReactNative Experimental Features\\">
    <!--
      Enables default usage of Hermes.
      
      See https://microsoft.github.io/react-native-windows/docs/hermes
    -->
    <UseHermes>false</UseHermes>

    <!--
      Changes compilation to assume use of WinUI 3 instead of System XAML.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/winui3
    -->
    <UseWinUI3>false</UseWinUI3>

    <!--
      Changes compilation to assume use of Microsoft.ReactNative NuGet packages
      instead of building the framework from source.
      Requires creation of new project.

      See https://microsoft.github.io/react-native-windows/docs/nuget
    -->
    <UseExperimentalNuget>false</UseExperimentalNuget>
  
  </PropertyGroup>

</Project>
"
`;

exports[`cpp-app: windows/NuGet.Config 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<configuration>
  <config>
    <add key=\\"repositoryPath\\" value=\\"packages\\" />
  </config>
  <packageSources>
    <clear />
    <add key=\\"react-native\\" value=\\"https://pkgs.dev.azure.com/ms/react-native/_packaging/react-native-public/nuget/v3/index.json\\" />
    <add key=\\"Nuget.org\\" value=\\"https://api.nuget.org/v3/index.json\\" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>  
</configuration>
"
`;

exports[`cpp-app: windows/SnapshotApp.sln 1`] = `
"ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29215.179
MinimumVisualStudioVersion = 10.0.40219.1
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"SnapshotApp\\", \\"SnapshotApp\\\\SnapshotApp.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Folly\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Folly\\\\Folly.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"fmt\\", \\"..\\\\node_modules\\\\react-native-windows\\\\fmt\\\\fmt.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactCommon\\", \\"..\\\\node_modules\\\\react-native-windows\\\\ReactCommon\\\\ReactCommon.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
	ProjectSection(ProjectDependencies) = postProject
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndProjectSection
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Chakra\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative\\\\Microsoft.ReactNative.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Cxx\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Common\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Common\\\\Common.vcxproj\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"ReactNative\\", \\"ReactNative\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Microsoft.ReactNative.Shared\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Mso\\", \\"..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Project(\\"{00000000-0000-0000-0000-000000000000}\\") = \\"Include\\", \\"..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems\\", \\"{00000000-0000-0000-0000-000000000000}\\"
EndProject
Global
	GlobalSection(SharedMSBuildProjectFiles) = preSolution
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\include\\\\Include.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 9
		..\\\\node_modules\\\\react-native-windows\\\\Chakra\\\\Chakra.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Microsoft.ReactNative.Cxx\\\\Microsoft.ReactNative.Cxx.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Mso\\\\Mso.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
		..\\\\node_modules\\\\react-native-windows\\\\Shared\\\\Shared.vcxitems*{00000000-0000-0000-0000-000000000000}*SharedItemsImports = 4
	EndGlobalSection
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|ARM64 = Debug|ARM64
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|ARM64 = Release|ARM64
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Deploy.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Deploy.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Deploy.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Deploy.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.ActiveCfg = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|ARM64.Build.0 = Debug|ARM64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.ActiveCfg = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x64.Build.0 = Debug|x64
		{00000000-0000-0000-0000-000000000000}.Debug|x86.ActiveCfg = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Build.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Debug|x86.Deploy.0 = Debug|Win32
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.ActiveCfg = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|ARM64.Build.0 = Release|ARM64
		{00000000-0000-0000-0000-000000000000}.Release|x64.ActiveCfg = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x64.Build.0 = Release|x64
		{00000000-0000-0000-0000-000000000000}.Release|x86.ActiveCfg = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Build.0 = Release|Win32
		{00000000-0000-0000-0000-000000000000}.Release|x86.Deploy.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
		{00000000-0000-0000-0000-000000000000} = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {00000000-0000-0000-0000-000000000000}
	EndGlobalSection
EndGlobal
"
`;

exports[`cpp-app: windows/SnapshotApp/App.cpp 1`] = `
"#include \\"pch.h\\"

#include \\"App.h\\"

#include \\"AutolinkedNativeModules.g.h\\"
#include \\"ReactPackageProvider.h\\"

using namespace winrt;
using namespace xaml;
using namespace xaml::Controls;
using namespace xaml::Navigation;

using namespace Windows::ApplicationModel;
namespace winrt::SnapshotApp::implementation
{
/// <summary>
/// Initializes the singleton application object.  This is the first line of
/// authored code executed, and as such is the logical equivalent of main() or
/// WinMain().
/// </summary>
App::App() noexcept
{
#if BUNDLE
    JavaScriptBundleFile(L\\"index.windows\\");
    InstanceSettings().UseWebDebugger(false);
    InstanceSettings().UseFastRefresh(false);
#else
    JavaScriptBundleFile(L\\"index\\");
    InstanceSettings().UseWebDebugger(true);
    InstanceSettings().UseFastRefresh(true);
#endif

#if _DEBUG
    InstanceSettings().UseDeveloperSupport(true);
#else
    InstanceSettings().UseDeveloperSupport(false);
#endif

    RegisterAutolinkedNativeModulePackages(PackageProviders()); // Includes any autolinked modules

    PackageProviders().Append(make<ReactPackageProvider>()); // Includes all modules in this project

    InitializeComponent();
}

/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name=\\"e\\">Details about the launch request and process.</param>
void App::OnLaunched(activation::LaunchActivatedEventArgs const& e)
{
    super::OnLaunched(e);

    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), box_value(e.Arguments()));
}

/// <summary>
/// Invoked when the application is activated by some means other than normal launching.
/// </summary>
void App::OnActivated(Activation::IActivatedEventArgs const &e) {
  auto preActivationContent = Window::Current().Content();
  super::OnActivated(e);
  if (!preActivationContent && Window::Current()) {
    Frame rootFrame = Window::Current().Content().as<Frame>();
    rootFrame.Navigate(xaml_typename<MainPage>(), nullptr);
  }
}

/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name=\\"sender\\">The source of the suspend request.</param>
/// <param name=\\"e\\">Details about the suspend request.</param>
void App::OnSuspending([[maybe_unused]] IInspectable const& sender, [[maybe_unused]] SuspendingEventArgs const& e)
{
    // Save application state and stop any background activity
}

/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name=\\"sender\\">The Frame which failed navigation</param>
/// <param name=\\"e\\">Details about the navigation failure</param>
void App::OnNavigationFailed(IInspectable const&, NavigationFailedEventArgs const& e)
{
    throw hresult_error(E_FAIL, hstring(L\\"Failed to load Page \\") + e.SourcePageType().Name);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app: windows/SnapshotApp/App.h 1`] = `
"#pragma once

#include \\"App.xaml.g.h\\"

#include <CppWinRTIncludes.h>

#ifdef USE_WINUI3
namespace activation = winrt::Microsoft::UI::Xaml;
#else
namespace activation = winrt::Windows::ApplicationModel::Activation;
#endif

namespace winrt::SnapshotApp::implementation
{
    struct App : AppT<App>
    {
        App() noexcept;
        void OnLaunched(activation::LaunchActivatedEventArgs const&);
        void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const &e);
        void OnSuspending(IInspectable const&, Windows::ApplicationModel::SuspendingEventArgs const&);
        void OnNavigationFailed(IInspectable const&, xaml::Navigation::NavigationFailedEventArgs const&);
      private:
        using super = AppT<App>;
    };
} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app: windows/SnapshotApp/App.idl 1`] = `
"namespace SnapshotApp
{
}
"
`;

exports[`cpp-app: windows/SnapshotApp/App.xaml 1`] = `
"ï»¿<react:ReactApplication
    x:Class=\\"SnapshotApp.App\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\">
    <Application.Resources>
        <XamlControlsResources xmlns=\\"using:Microsoft.UI.Xaml.Controls\\" />
    </Application.Resources>
</react:ReactApplication>
"
`;

exports[`cpp-app: windows/SnapshotApp/AutolinkedNativeModules.g.cpp 1`] = `
"// AutolinkedNativeModules.g.cpp contents generated by \\"react-native autolink-windows\\"
// clang-format off
#include \\"pch.h\\"
#include \\"AutolinkedNativeModules.g.h\\"

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders)
{ 
    UNREFERENCED_PARAMETER(packageProviders);
}

}
"
`;

exports[`cpp-app: windows/SnapshotApp/AutolinkedNativeModules.g.h 1`] = `
"// AutolinkedNativeModules.g.h contents generated by \\"react-native autolink-windows\\"
// clang-format off
#pragma once

namespace winrt::Microsoft::ReactNative
{

void RegisterAutolinkedNativeModulePackages(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::ReactNative::IReactPackageProvider> const& packageProviders);

}
"
`;

exports[`cpp-app: windows/SnapshotApp/AutolinkedNativeModules.g.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.props contents generated by \\"react-native autolink-windows\\" -->
  <PropertyGroup>
  </PropertyGroup>
</Project>
"
`;

exports[`cpp-app: windows/SnapshotApp/AutolinkedNativeModules.g.targets 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <!-- AutolinkedNativeModules.g.targets contents generated by \\"react-native autolink-windows\\" -->
  <ItemGroup>
  </ItemGroup>
</Project>
"
`;

exports[`cpp-app: windows/SnapshotApp/Bundle/index.windows.bundle 1`] = `
"/**
 * 
 * Be sure to generate this file using the CLI:
 *
 * npx react-native bundle --platform windows --entry-file index.js 
 *   --bundle-output windows\\\\SnapshotApp\\\\Bundle\\\\index.windows.bundle
 *   --assets-dest windows\\\\SnapshotApp\\\\Bundle
 *
 */"
`;

exports[`cpp-app: windows/SnapshotApp/MainPage.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
#include \\"MainPage.h\\"
#if __has_include(\\"MainPage.g.cpp\\")
#include \\"MainPage.g.cpp\\"
#endif

#include \\"App.h\\"

using namespace winrt;
using namespace xaml;

namespace winrt::SnapshotApp::implementation
{
    MainPage::MainPage()
    {
        InitializeComponent();
        auto app = Application::Current().as<App>();
        ReactRootView().ReactNativeHost(app->Host());
    }
}
"
`;

exports[`cpp-app: windows/SnapshotApp/MainPage.h 1`] = `
"ï»¿#pragma once
#include \\"MainPage.g.h\\"
#include <winrt/Microsoft.ReactNative.h>

namespace winrt::SnapshotApp::implementation
{
    struct MainPage : MainPageT<MainPage>
    {
        MainPage();
    };
}

namespace winrt::SnapshotApp::factory_implementation
{
    struct MainPage : MainPageT<MainPage, implementation::MainPage>
    {
    };
}

"
`;

exports[`cpp-app: windows/SnapshotApp/MainPage.idl 1`] = `
"#include \\"NamespaceRedirect.h\\"

namespace SnapshotApp
{
    [default_interface]
    runtimeclass MainPage : XAML_NAMESPACE.Controls.Page
    {
        MainPage();
    }
}
"
`;

exports[`cpp-app: windows/SnapshotApp/MainPage.xaml 1`] = `
"<Page
    x:Class=\\"SnapshotApp.MainPage\\"
    xmlns=\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\"
    xmlns:x=\\"http://schemas.microsoft.com/winfx/2006/xaml\\"
    xmlns:local=\\"using:SnapshotApp\\"
    xmlns:react=\\"using:Microsoft.ReactNative\\"
    xmlns:d=\\"http://schemas.microsoft.com/expression/blend/2008\\"
    xmlns:mc=\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\"
    mc:Ignorable=\\"d\\"
    Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\">
    <react:ReactRootView 
        x:Name=\\"ReactRootView\\"
        ComponentName=\\"SnapshotApp\\"
        Background=\\"{ThemeResource ApplicationPageBackgroundThemeBrush}\\"
        MinHeight=\\"400\\"/>
</Page>
"
`;

exports[`cpp-app: windows/SnapshotApp/Package.appxmanifest 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>

<Package
  xmlns=\\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\\"
  xmlns:mp=\\"http://schemas.microsoft.com/appx/2014/phone/manifest\\"
  xmlns:uap=\\"http://schemas.microsoft.com/appx/manifest/uap/windows10\\"
  IgnorableNamespaces=\\"uap mp\\">

  <Identity
    Name=\\"00000000-0000-0000-0000-000000000000\\"
    Publisher=\\"CN=test\\"
    Version=\\"1.0.0.0\\" />

  <mp:PhoneIdentity PhoneProductId=\\"00000000-0000-0000-0000-000000000000\\" PhonePublisherId=\\"00000000-0000-0000-0000-000000000000\\"/>

  <Properties>
    <DisplayName>SnapshotApp</DisplayName>
    <PublisherDisplayName>test</PublisherDisplayName>
    <Logo>Assets\\\\StoreLogo.png</Logo>
  </Properties>

  <Dependencies>
    <TargetDeviceFamily Name=\\"Windows.Universal\\" MinVersion=\\"10.0.0.0\\" MaxVersionTested=\\"10.0.0.0\\" />
  </Dependencies>

  <Resources>
    <Resource Language=\\"x-generate\\"/>
  </Resources>

  <Applications>
    <Application
      Id=\\"App\\"
      Executable=\\"$targetnametoken$.exe\\"
      EntryPoint=\\"SnapshotApp.App\\">
      <uap:VisualElements
        DisplayName=\\"SnapshotApp\\"
        Square150x150Logo=\\"Assets\\\\Square150x150Logo.png\\"
        Square44x44Logo=\\"Assets\\\\Square44x44Logo.png\\"
        Description=\\"SnapshotApp\\"
        BackgroundColor=\\"transparent\\">
        <uap:DefaultTile Wide310x150Logo=\\"Assets\\\\Wide310x150Logo.png\\"/>
        <uap:SplashScreen Image=\\"Assets\\\\SplashScreen.png\\" />
      </uap:VisualElements>
    </Application>
  </Applications>

  <Capabilities>
    <Capability Name=\\"internetClient\\" />
  </Capabilities>
</Package>"
`;

exports[`cpp-app: windows/SnapshotApp/PropertySheet.props 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ImportGroup Label=\\"PropertySheets\\" />
  <PropertyGroup Label=\\"UserMacros\\" />
  <!--
    To customize common C++/WinRT project properties:
    * right-click the project node
    * expand the Common Properties item
    * select the C++/WinRT property page

    For more advanced scenarios, and complete documentation, please see:
    https://github.com/Microsoft/xlang/tree/master/src/package/cppwinrt/nuget
    -->
  <PropertyGroup />
  <ItemDefinitionGroup />
</Project>"
`;

exports[`cpp-app: windows/SnapshotApp/ReactPackageProvider.cpp 1`] = `
"#include \\"pch.h\\"
#include \\"ReactPackageProvider.h\\"
#include \\"NativeModules.h\\"

using namespace winrt::Microsoft::ReactNative;

namespace winrt::SnapshotApp::implementation
{

void ReactPackageProvider::CreatePackage(IReactPackageBuilder const &packageBuilder) noexcept
{
    AddAttributedModules(packageBuilder);
}

} // namespace winrt::SnapshotApp::implementation
"
`;

exports[`cpp-app: windows/SnapshotApp/ReactPackageProvider.h 1`] = `
"#pragma once

#include \\"winrt/Microsoft.ReactNative.h\\"

namespace winrt::SnapshotApp::implementation
{
    struct ReactPackageProvider : winrt::implements<ReactPackageProvider, winrt::Microsoft::ReactNative::IReactPackageProvider>
    {
    public: // IReactPackageProvider
        void CreatePackage(winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder) noexcept;
    };
} // namespace winrt::SnapshotApp::implementation

"
`;

exports[`cpp-app: windows/SnapshotApp/SnapshotApp.vcxproj 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" DefaultTargets=\\"Build\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <Import Project=\\"$(SolutionDir)\\\\ExperimentalFeatures.props\\" Condition=\\"Exists('$(SolutionDir)\\\\ExperimentalFeatures.props')\\" />
  <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" />
  <PropertyGroup Label=\\"Globals\\">
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <MinimalCoreWin>true</MinimalCoreWin>
    <ProjectGuid>{00000000-0000-0000-0000-000000000000}</ProjectGuid>
    <ProjectName>SnapshotApp</ProjectName>
    <RootNamespace>SnapshotApp</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <AppContainerApplication>true</AppContainerApplication>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <PropertyGroup Label=\\"ReactNativeWindowsProps\\">
    <ReactNativeWindowsDir Condition=\\"'$(ReactNativeWindowsDir)' == ''\\">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\\\\react-native-windows\\\\package.json'))\\\\node_modules\\\\react-native-windows\\\\</ReactNativeWindowsDir>
  </PropertyGroup>
  <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.WindowsSdk.Default.props\\" />
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\\" />
  <ItemGroup Label=\\"ProjectConfigurations\\">
    <ProjectConfiguration Include=\\"Debug|ARM64\\">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|Win32\\">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Debug|x64\\">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|ARM64\\">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|Win32\\">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include=\\"Release|x64\\">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label=\\"Configuration\\">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Debug'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition=\\"'$(Configuration)'=='Release'\\" Label=\\"Configuration\\">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.props\\" />
  <ImportGroup Label=\\"ExtensionSettings\\"></ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\\" Condition=\\"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\\" Label=\\"LocalAppDataPlatform\\" />
  </ImportGroup>
  <ImportGroup Label=\\"PropertySheets\\">
    <Import Project=\\"PropertySheet.props\\" />
  </ImportGroup>
  <ImportGroup Label=\\"ReactNativeWindowsPropertySheets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\external\\\\Microsoft.ReactNative.Uwp.CppApp.props\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageProps)\\" Condition=\\"'$(WinUIPackageProps)'!='' And Exists('..\\\\packages\\\\$(WinUIPackageProps)')\\" />
  </ImportGroup>
  <PropertyGroup Label=\\"UserMacros\\" />
  <ItemDefinitionGroup>
    <ClCompile>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeaderOutputFile>$(IntDir)pch.pch</PrecompiledHeaderOutputFile>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /bigobj</AdditionalOptions>
      <DisableSpecificWarnings>4453;28204</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Debug'\\">
    <ClCompile>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition=\\"'$(Configuration)'=='Release'\\">
    <ClCompile>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include=\\"MainPage.h\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClInclude>
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\">
      <SubType>Designer</SubType>
    </ApplicationDefinition>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\" />
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\" />
    <Image Include=\\"Assets\\\\StoreLogo.png\\" />
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"MainPage.cpp\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </ClCompile>
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
    <ClCompile Include=\\"pch.cpp\\">
      <PrecompiledHeader>Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include=\\"App.cpp\\">
      <DependentUpon>App.xaml</DependentUpon>
    </ClCompile>
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\">
      <DependentUpon>App.xaml</DependentUpon>
    </Midl>
    <Midl Include=\\"MainPage.idl\\">
      <DependentUpon>MainPage.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Midl>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"packages.config\\" />
    <None Include=\\"PropertySheet.props\\" />
    <Text Include=\\"readme.txt\\">
      <DeploymentContent>false</DeploymentContent>
    </Text>
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\">
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>
  <Import Project=\\"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\\" />
  <ImportGroup Label=\\"ReactNativeWindowsTargets\\">
    <Import Project=\\"$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets\\" Condition=\\"Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureReactNativeWindowsTargets\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references targets in your node_modules\\\\react-native-windows folder that are missing. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.props'))\\" />
    <Error Condition=\\"!Exists('$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '$(ReactNativeWindowsDir)\\\\PropertySheets\\\\External\\\\Microsoft.ReactNative.Uwp.CppApp.targets'))\\" />
  </Target>
  <ImportGroup Label=\\"ExtensionTargets\\">
    <Import Project=\\"..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets\\" Condition=\\"Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets\\" Condition=\\"Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" />
    <Import Project=\\"..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets\\" Condition=\\"Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" />
  </ImportGroup>
  <Target Name=\\"EnsureNuGetPackageBuildImports\\" BeforeTargets=\\"PrepareForBuild\\">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.props'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\Microsoft.Windows.CppWinRT.2.0.210312.4\\\\build\\\\native\\\\Microsoft.Windows.CppWinRT.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\ReactNative.Hermes.Windows.0.9.0-ms.6\\\\build\\\\native\\\\ReactNative.Hermes.Windows.targets'))\\" />
    <Error Condition=\\"!Exists('..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets')\\" Text=\\"$([System.String]::Format('$(ErrorText)', '..\\\\packages\\\\$(WinUIPackageName).$(WinUIPackageVersion)\\\\build\\\\native\\\\$(WinUIPackageName).targets'))\\" />
  </Target>
</Project>
"
`;

exports[`cpp-app: windows/SnapshotApp/SnapshotApp.vcxproj.filters 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<Project ToolsVersion=\\"Current\\" xmlns=\\"http://schemas.microsoft.com/developer/msbuild/2003\\">
  <ItemGroup>
    <ApplicationDefinition Include=\\"App.xaml\\" />
  </ItemGroup>
  <ItemGroup>
    <Midl Include=\\"App.idl\\" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include=\\"pch.cpp\\" />
    <ClCompile Include=\\"App.cpp\\" />
    <ClCompile Include=\\"$(GeneratedFilesDir)module.g.cpp\\" />
    <ClCompile Include=\\"ReactPackageProvider.cpp\\" />
    <ClCompile Include=\\"AutolinkedNativeModules.g.cpp\\" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include=\\"pch.h\\" />
    <ClInclude Include=\\"App.h\\" />
    <ClInclude Include=\\"ReactPackageProvider.h\\" />
    <ClInclude Include=\\"AutolinkedNativeModules.g.h\\" />
  </ItemGroup>
  <ItemGroup>
    <Image Include=\\"Assets\\\\Wide310x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\StoreLogo.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square150x150Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.targetsize-24_altform-unplated.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\Square44x44Logo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\SplashScreen.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
    <Image Include=\\"Assets\\\\LockScreenLogo.scale-200.png\\">
      <Filter>Assets</Filter>
    </Image>
  </ItemGroup>
  <ItemGroup>
    <AppxManifest Include=\\"Package.appxmanifest\\" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include=\\"Assets\\">
      <UniqueIdentifier>{00000000-0000-0000-0000-000000000000}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include=\\"PropertySheet.props\\" />
    <None Include=\\"packages.config\\" />
  </ItemGroup>
  <ItemGroup>
    <Text Include=\\"readme.txt\\" />
  </ItemGroup>
  <ItemGroup>
    <Page Include=\\"MainPage.xaml\\" />
  </ItemGroup>
</Project>"
`;

exports[`cpp-app: windows/SnapshotApp/packages.config 1`] = `
"ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<packages>
  <package id=\\"Microsoft.Windows.CppWinRT\\" version=\\"2.0.210312.4\\" targetFramework=\\"native\\" />
  <package id=\\"ReactNative.Hermes.Windows\\" version=\\"0.9.0-ms.6\\" targetFramework=\\"native\\" />
  <package id=\\"Microsoft.UI.Xaml\\" version=\\"2.7.0\\" targetFramework=\\"native\\" />
</packages>"
`;

exports[`cpp-app: windows/SnapshotApp/pch.cpp 1`] = `
"ï»¿#include \\"pch.h\\"
"
`;

exports[`cpp-app: windows/SnapshotApp/pch.h 1`] = `
"#pragma once

#define NOMINMAX

#include <hstring.h>
#include <restrictederrorinfo.h>
#include <unknwn.h>
#include <windows.h>
#include <CppWinRTIncludes.h>
#include <VersionMacros.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <UI.Xaml.Controls.Primitives.h>
#include <UI.Xaml.Controls.h>
#include <UI.Xaml.Markup.h>
#include <UI.Xaml.Navigation.h>

#include <winrt/Microsoft.ReactNative.h>

#include <winrt/Microsoft.UI.Xaml.Automation.Peers.h>
#include <winrt/Microsoft.UI.Xaml.Controls.Primitives.h>
#include <winrt/Microsoft.UI.Xaml.Controls.h>
#include <winrt/Microsoft.UI.Xaml.Media.h>
#include <winrt/Microsoft.UI.Xaml.XamlTypeInfo.h>
using namespace winrt::Windows::Foundation;
"
`;
