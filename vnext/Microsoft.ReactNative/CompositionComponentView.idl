// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "ComponentView.idl";
import "Theme.idl";
import "ViewProps.idl";
import "Composition.Input.idl";
import "CompositionSwitcher.idl";
import "IReactContext.idl";

#include "DocString.h"

namespace Microsoft.ReactNative.Composition
{

  [flags]
  [webhosthidden]
  [experimental]
  enum ComponentViewFeatures
  {
    None          = 0x00000000,
    NativeBorder  = 0x00000001,
    ShadowProps   = 0x00000002,
    Background    = 0x00000004,

    Default       = 0x00000007, // ShadowProps | NativeBorder | Background
  };

  namespace Experimental {
    [webhosthidden]
    [experimental]
    interface IInternalComponentView
    {
      ICompositionContext CompositionContext { get; };
    }
  }

  // [exclusiveto(ComponentView)]
  // [uuid(ABFAC092-E527-47DC-9CF9-7A4003B0AFB0)]
  // interface IComponentViewFactory
  // {
  // }

  // [composable(IComponentViewFactory, protected)]
  [experimental]
  [webhosthidden]
  unsealed runtimeclass ComponentView : Microsoft.ReactNative.ComponentView {
    Microsoft.UI.Composition.Compositor Compositor { get; };
    RootComponentView Root { get; };
    Theme Theme;

    event Windows.Foundation.EventHandler<IInspectable> ThemeChanged;
    Boolean CapturePointer(Microsoft.ReactNative.Composition.Input.Pointer pointer);
    void ReleasePointerCapture(Microsoft.ReactNative.Composition.Input.Pointer pointer);
  };

  namespace Experimental {

    [webhosthidden]
    [experimental]
    delegate Microsoft.ReactNative.Composition.Experimental.IVisual CreateInternalVisualDelegate();

    [webhosthidden]
    [experimental]
    DOC_STRING("Custom ViewComponents need to implement this interface to be able to provide a custom"
    " visual using the composition context that allows custom compositors. This is only required for"
    " custom components that need to support running in RNW instances with custom compositors. Most"
  " custom components can just set CreateVisualHandler on ViewComponentView."
    " This will be removed in a future version")
    interface IInternalCreateVisual
    {
      CreateInternalVisualDelegate CreateInternalVisualHandler;
    }
  }

  // [exclusiveto(ViewComponentView)]
  // [uuid(756AA1DF-ED74-467E-9BAA-3797B39B1875)]
  // interface IViewComponentViewFactory
  // {
  // }

  // [composable(IViewComponentViewFactory, protected)]
  [experimental]
  [webhosthidden]
  unsealed runtimeclass ViewComponentView : ComponentView {

    Microsoft.ReactNative.ViewProps ViewProps { get; };
  };

  // Some other interfaces we could consider implementing/exposing
  // Use ifdef USE_EXPERIMENTAL_WINUI3 to add these
  // Microsoft.UI.Content.IContentLink // Use ifdef USE_EXPERIMENTAL_WINUI3
  // Microsoft.UI.Content.IContentSiteBridge 
  // Microsoft.UI.Content.IContentSiteBridge2 // Use ifdef USE_EXPERIMENTAL_WINUI3
  [experimental]
  [webhosthidden]
  runtimeclass ContentIslandComponentView : ViewComponentView { 
    void Connect(Microsoft.UI.Content.ContentIsland contentIsland);
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass SwitchComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass RootComponentView : ViewComponentView {
    Microsoft.ReactNative.ComponentView GetFocusedComponent();
  };
  
  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass DebuggingOverlayComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass ActivityIndicatorComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass WindowsModalHostComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass ImageComponentView : ViewComponentView {
    Microsoft.ReactNative.ImageProps ViewProps { get; };
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass ParagraphComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass ScrollViewComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass UnimplementedNativeViewComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  runtimeclass WindowsTextInputComponentView : ViewComponentView {
  };
  
} // namespace Microsoft.ReactNative
