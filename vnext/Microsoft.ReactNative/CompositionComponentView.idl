// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "ComponentView.idl";
import "Theme.idl";
import "ViewProps.idl";
import "Composition.Input.idl";
import "CompositionSwitcher.idl";
import "IReactContext.idl";

#include "DocString.h"

namespace Microsoft.ReactNative.Composition
{

  [flags]
  [webhosthidden]
  [experimental]
  enum ComponentViewFeatures
  {
    None          = 0x00000000,
    NativeBorder  = 0x00000001,
    ShadowProps   = 0x00000002,
    Background    = 0x00000004,

    Default       = 0x00000007, // ShadowProps | NativeBorder | Background
  };

  namespace Experimental {
    [webhosthidden]
    [experimental]
    interface IInternalCreateComponentViewArgs
    {
      ICompositionContext CompositionContext { get; };
    }
  }

  [experimental]
  [webhosthidden]
  runtimeclass CreateCompositionComponentViewArgs : Microsoft.ReactNative.CreateComponentViewArgs {
    Microsoft.UI.Composition.Compositor Compositor { get; };
    ComponentViewFeatures Features;
  };

  [experimental]
  [webhosthidden]
  unsealed runtimeclass ComponentView : Microsoft.ReactNative.ComponentView {
    ComponentView(CreateCompositionComponentViewArgs args);

    Microsoft.UI.Composition.Compositor Compositor { get; };
    Theme Theme;
    overridable void OnThemeChanged();
    Boolean CapturePointer(Microsoft.ReactNative.Composition.Input.Pointer pointer);
    void ReleasePointerCapture(Microsoft.ReactNative.Composition.Input.Pointer pointer);
  };

  namespace Experimental {
    [webhosthidden]
    [experimental]
    DOC_STRING("Custom ViewComponents need to implement this interface to be able to provide a custom"
    " visual using the composition context that allows custom compositors. This is only required for"
    " custom components that need to support running in RNW instances with custom compositors. Most"
    " custom components can just override CreateVisual on ViewComponentView."
    " This will be removed in a future version")
    interface IInternalCreateVisual
    {
      Microsoft.ReactNative.Composition.Experimental.IVisual CreateInternalVisual();
    }
  }

  [experimental]
  [webhosthidden]
  unsealed runtimeclass ViewComponentView : ComponentView {
    ViewComponentView(CreateCompositionComponentViewArgs args);

    Microsoft.ReactNative.ViewProps ViewProps { get; };

    overridable Microsoft.UI.Composition.Visual CreateVisual();
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass SwitchComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass RootComponentView : ViewComponentView {
  };
  
  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass DebuggingOverlayComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass ActivityIndicatorComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass WindowsModalHostComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass ImageComponentView : ViewComponentView {
    Microsoft.ReactNative.ImageProps ViewProps { get; };
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass ParagraphComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass ScrollViewComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass UnimplementedNativeViewComponentView : ViewComponentView {
  };

  [experimental]
  [webhosthidden]
  [default_interface]
  unsealed runtimeclass WindowsTextInputComponentView : ViewComponentView {
  };
  
} // namespace Microsoft.ReactNative
