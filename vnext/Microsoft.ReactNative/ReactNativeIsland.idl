// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "IJSValueWriter.idl";
import "ReactCoreInjection.idl";
import "ReactNativeHost.idl";
import "Theme.idl";
import "IReactViewComponentBuilder.idl";
#include "NamespaceRedirect.h"
#include "DocString.h"

namespace Microsoft.ReactNative
{
  [experimental]
  DOC_STRING("sdf")
  enum FocusNavigationReason
  {
    Restore,
    First,
    Last,
  };

  [default_interface]
  [webhosthidden]
  [experimental]
  DOC_STRING("Argument type for @ReactNativeIsland.NavigateFocus.")
  runtimeclass FocusNavigationRequest {
    DOC_STRING("Creates new instance of @FocusNavigationRequest")
        FocusNavigationRequest(FocusNavigationReason reason);

    DOC_STRING("The reason the @ReactNativeIsland is getting focus.")
    FocusNavigationReason Reason {get;set;};
  };

  [default_interface]
  [webhosthidden]
  [experimental]
  DOC_STRING("Provides result from a @ReactNativeIsland.NavigateFocus method call.")
  runtimeclass FocusNavigationResult {
    DOC_STRING("Gets a value that indicates whether the focus successfully moved.")
    Boolean WasFocusMoved {get;};
  };

  namespace Composition.Experimental {
  [webhosthidden]
  [experimental]
  DOC_STRING("Custom ViewComponents need to implement this interface to be able to provide a custom"
  " visual using the composition context that allows custom compositors.  This is only required for"
  " custom components that need to support running in RNW instances with custom compositors.  Most"
  " custom components can just override CreateVisual on ViewComponentView. This interface will be removed"
  " in future versions")
  interface IInternalCompositionRootView
  {
    DOC_STRING("The RootVisual associated with the @ReactNativeIsland. It must be set to show any React UI elements.")
    Microsoft.ReactNative.Composition.Experimental.IVisual InternalRootVisual { get; set; };
    
    DOC_STRING("Hosting Window that input is coming from. Only required when not using ContentIslands")
    void SetWindow(UInt64 hwnd);

    DOC_STRING("Forward input to the RootView. Only required when not using ContentIslands")
    Int64 SendMessage(UInt32 Msg, UInt64 WParam, Int64 LParam);

    void OnMounted();
    void OnUnmounted();
  }
  }

  [default_interface]
  [webhosthidden]
  [experimental]
  runtimeclass RootViewSizeChangedEventArgs {
    Windows.Foundation.Size Size { get; };
  }

  [default_interface]
  [webhosthidden]
  [experimental]
  DOC_STRING("A windows composition component that hosts React Native UI elements.")
  runtimeclass ReactNativeIsland
  {
    DOC_STRING("Creates a new instance of @ReactNativeIsland.")
    ReactNativeIsland();

#ifdef USE_WINUI3
    ReactNativeIsland(Microsoft.UI.Composition.Compositor compositor);
#endif

    DOC_STRING(
      "A ReactViewHost specifies the root UI component and initial properties to render in this RootView"
      "It must be set to show any React UI elements.")
    IReactViewHost ReactViewHost { get; set; };

    DOC_STRING("The RootVisual associated with the @ReactNativeIsland. It must be set to show any React UI elements.")
    Microsoft.UI.Composition.Visual RootVisual { get; };

    Windows.Foundation.Size Size { get; };

    DOC_STRING("ScaleFactor for this windows (DPI/96)")
    Single ScaleFactor {get; set;};

    DOC_STRING("Move focus to this @ReactNativeIsland")
    FocusNavigationResult NavigateFocus(FocusNavigationRequest request);

    Windows.Foundation.Size Measure(LayoutConstraints layoutConstraints, Windows.Foundation.Point viewportOffset);
    void Arrange(LayoutConstraints layoutConstraints, Windows.Foundation.Point viewportOffset);

    Object GetUiaProvider();

    DOC_STRING("Provides resources used for Platform colors within this RootView")
    Microsoft.ReactNative.Composition.ICustomResourceLoader Resources;

    Microsoft.ReactNative.Composition.Theme Theme { get; };
    Int64 RootTag { get; };

#ifdef USE_WINUI3
    Microsoft.UI.Content.ContentIsland Island { get; };
#endif

    event Windows.Foundation.EventHandler<RootViewSizeChangedEventArgs> SizeChanged;
  }

} // namespace Microsoft.ReactNative
