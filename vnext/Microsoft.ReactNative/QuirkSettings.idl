// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "ReactInstanceSettings.idl";

#include "DocString.h"

namespace Microsoft.ReactNative
{

  enum BackNavigationHandlerKind {
    JavaScript = 0,
    Native = 1
  };

  [webhosthidden]
  [default_interface]
  [experimental]
  DOC_STRING(
    "This can be used to add settings that allow react-native-windows behavior to be maintained across version updates "
    "to facilitate upgrades. Settings in this class are likely to be removed in future releases, so apps should try "
    "to update their code to not rely on these settings.")
  static runtimeclass QuirkSettings
  {
    DOC_STRING(
      "Older versions of react-native-windows did not use [Yoga](https://github.com/facebook/yoga)'s legacy "
      "stretch behavior. This meant that react-native-windows would layout views "
      "slightly differently that in iOS and Android.\n"
      "Set this setting to false to maintain the behavior from react-native-windows <= 0.62.")
    DOC_DEFAULT("true")
    static void SetMatchAndroidAndIOSStretchBehavior(ReactInstanceSettings settings, Boolean value);

    DOC_STRING(
        "There is a chance that cached flex basis values can cause text truncation in some re-layout scenarios. "
        "Enabling [Yoga](https://github.com/facebook/yoga)'s experimental web flex basis behavior fixes this issue, "
        "however using it may result in perfomance regressions due to additional layout passes.")
    DOC_DEFAULT("false")
    static void SetUseWebFlexBasisBehavior(ReactInstanceSettings settings, Boolean value);

    DOC_STRING("Runtime setting allowing Networking (HTTP, WebSocket) connections to skip certificate validation.")
    static void SetAcceptSelfSigned(ReactInstanceSettings settings, Boolean value);

    DOC_STRING(
      "By default `react-native-windows` will handle various back events and forward them to JavaScript. "
      "Setting this to @BackNavigationHandlerKind.Native prevents `react-native-windows` from handling "
      "these events, including forwarding to JavaScript.  This will allow applications to handle back "
      "navigation in native code, but will prevent the `BackHandler` native module from receiving events.")
    static void SetBackHandlerKind(ReactInstanceSettings settings, BackNavigationHandlerKind kind);

    DOC_STRING(
      "By default `react-native-windows` will only track `active` and `background` `AppState`. "
      "Setting this to true enables `react-native-windows` to also track `inactive` `AppState` which [maps closely to iOS.](https://reactnative.dev/docs/appstate)"
      "`inactive` tracks the [Window.Activated Event](https://docs.microsoft.com/uwp/api/windows.ui.core.corewindow.activated) when the window is deactivated.")
    DOC_DEFAULT("false")
    static void SetMapWindowDeactivatedToAppStateInactive(ReactInstanceSettings settings, Boolean value);
  }
} // namespace Microsoft.ReactNative
