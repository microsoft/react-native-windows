// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "IViewManagerCore.idl";
import "ReactPointerEventArgs.idl";

#include "NamespaceRedirect.h"
#include "DocString.h"

namespace Microsoft.ReactNative
{

  [webhosthidden]
  DOC_STRING(
    "See the documentation of [Native UI Components](view-managers) for information on how to author a view manager.\n"
    ">**This documentation and the underlying platform code is a work in progress.**"
  )
  interface IViewManager
  {
    String Name { get; };

    XAML_NAMESPACE.FrameworkElement CreateView();
  }

  [webhosthidden]
  interface IViewManagerWithNativeProperties
  {
    IMapView<String, ViewManagerPropertyType> NativeProps { get; };

    void UpdateProperties(XAML_NAMESPACE.FrameworkElement view, IJSValueReader propertyMapReader);
  }

  [webhosthidden]
  interface IViewManagerWithCommands
  {
    IVectorView<String> Commands { get; };

    void DispatchCommand(XAML_NAMESPACE.FrameworkElement view, String commandId, IJSValueReader commandArgsReader);
  }

  [webhosthidden]
  interface IViewManagerWithChildren
  {
    void AddView(XAML_NAMESPACE.FrameworkElement parent, XAML_NAMESPACE.UIElement child, Int64 index);

    void RemoveAllChildren(XAML_NAMESPACE.FrameworkElement parent);

    void RemoveChildAt(XAML_NAMESPACE.FrameworkElement parent, Int64 index);

    void ReplaceChild(XAML_NAMESPACE.FrameworkElement parent, XAML_NAMESPACE.UIElement oldChild, XAML_NAMESPACE.UIElement newChild);
  }

  [webhosthidden] DOC_STRING("Enables a view manager to be responsible for its own layout and sizing.")
  interface IViewManagerRequiresNativeLayout
  {
    Boolean RequiresNativeLayout { get; };
  }

  [webhosthidden]
  DOC_STRING(
    "Enables a view manager to create views whose behavior depend on the the property values passed to the view manager at creation time. "
    "For example, a view manager could choose to create different types of UI elements based on the properties passed in."
  )
  interface IViewManagerCreateWithProperties {
    Object CreateViewWithProperties(IJSValueReader propertyMapReader);
  };

  [experimental]
  [webhosthidden]
  DOC_STRING(
    "Experimental interface enabling view managers to release pointer capture "
    "from the React root view and start handling pointer events itself."
  )
  interface IViewManagerWithPointerEvents {
    DOC_STRING(
      "When pointer events are received on the React root view, the top-level "
      "pointer event handler invokes this callback for each React view "
      "ancestor of the @Windows.UI.Xaml.RoutedEventArgs.OriginalSource "
      "element with a view manager that implements "
      "@IViewManagerWithPointerEvents to allow the view manager to modify "
      "handling for the pointer event. This can be used to refine the target "
      "view. E.g., setting the @ReactPointerEventArgs.Target property to null "
      "will force the React root view to choose one of the view's ancestors "
      "as the hit target. Alternatively, the view manager may also set the "
      "@ReactPointerEventArgs.Target to any descendent of provided view to "
      "enable hit testing on views that do not derive from "
      "@Windows.UI.Xaml.UIElement."
    )
    void OnPointerEvent(Object view, ReactPointerEventArgs args);
  };
  
  [webhosthidden]
  DOC_STRING(
    "Enables view managers to track when views are "
    "removed from the shadow tree. "
  )
  interface IViewManagerWithDropViewInstance {
    DOC_STRING(
        "Invoked when React has removed the view "
        "from its shadow tree. Note this method call is distinct from "
        "the XAML Unloaded event, which is asynchronously triggered "
        "from when the removal of the view from the UI tree happens. "
    )
    void OnDropViewInstance(XAML_NAMESPACE.FrameworkElement view);
  };

  [webhosthidden]
  DOC_STRING(
    "Enables view managers to receive callback when Yoga layout props are applied. "
  )
  interface IViewManagerWithOnLayout {
    DOC_STRING(
        "Invoked just before `onLayout` event is emitted for a view. "
        "Note: this callback is invoked any time the Yoga node returns true from "
        "YGNodeHasNewLayout. React Native Windows suppresses `onLayout` events "
        "when the final layout has not changed, so this method may be called "
        "without a corresponding `onLayout` event in JavaScript.")
    void OnLayout(XAML_NAMESPACE.FrameworkElement view, Single left, Single top, Single width, Single height);
  };
} // namespace Microsoft.ReactNative
