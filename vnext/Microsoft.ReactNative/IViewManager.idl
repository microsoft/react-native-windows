// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "IViewManagerCore.idl";
import "ReactPointerEventArgs.idl";

#include "NamespaceRedirect.h"
#include "DocString.h"

namespace Microsoft.ReactNative
{

  [webhosthidden]
  DOC_STRING(
    "See the documentation of [Native UI Components](view-managers) for information on how to author a view manager.\n"
    ">**This documentation and the underlying platform code is a work in progress.**"
  )
  interface IViewManager
  {
    String Name { get; };

    XAML_NAMESPACE.FrameworkElement CreateView();
  }

  [webhosthidden]
  interface IViewManagerWithNativeProperties
  {
    IMapView<String, ViewManagerPropertyType> NativeProps { get; };

    void UpdateProperties(XAML_NAMESPACE.FrameworkElement view, IJSValueReader propertyMapReader);
  }

  [webhosthidden]
  interface IViewManagerWithCommands
  {
    IVectorView<String> Commands { get; };

    void DispatchCommand(XAML_NAMESPACE.FrameworkElement view, String commandId, IJSValueReader commandArgsReader);
  }

  [webhosthidden]
  interface IViewManagerWithChildren
  {
    void AddView(XAML_NAMESPACE.FrameworkElement parent, XAML_NAMESPACE.UIElement child, Int64 index);

    void RemoveAllChildren(XAML_NAMESPACE.FrameworkElement parent);

    void RemoveChildAt(XAML_NAMESPACE.FrameworkElement parent, Int64 index);

    void ReplaceChild(XAML_NAMESPACE.FrameworkElement parent, XAML_NAMESPACE.UIElement oldChild, XAML_NAMESPACE.UIElement newChild);
  }

  [webhosthidden] DOC_STRING("Enables a view manager to be responsible for its own layout and sizing.")
  interface IViewManagerRequiresNativeLayout
  {
    Boolean RequiresNativeLayout { get; };
  }

  [webhosthidden]
  DOC_STRING(
    "Enables a view manager to create views whose behavior depend on the the property values passed to the view manager at creation time. "
    "For example, a view manager could choose to create different types of UI elements based on the properties passed in."
  )
  interface IViewManagerCreateWithProperties {
    Object CreateViewWithProperties(IJSValueReader propertyMapReader);
  };

  [webhosthidden]
  DOC_STRING(
    "Enables a view manager to release pointer capture from the React root view and start handling pointer events itself."
  )
  interface IViewManagerWithPointerEvents {
    void OnPointerEvent(Object view, ReactPointerEventArgs args);
  };
} // namespace Microsoft.ReactNative
