// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "IReactContext.idl";
import "IReactDispatcher.idl";
import "IReactNotificationService.idl";
import "IReactPackageProvider.idl";
import "IReactPropertyBag.idl";
import "RedBoxHandler.idl";

#include "DocString.h"

namespace Microsoft.ReactNative
{
  DOC_STRING(
    "Used in @LogHandler to represent different LogLevels")
  enum LogLevel
  {
    Trace = 0,
    Info = 1,
    Warning = 2,
    Error = 3,
    Fatal = 4
  };

  DOC_STRING(
    "delegate to represent a logging function.")
  delegate void LogHandler(LogLevel level, String message);


  DOC_STRING(
    "A JavaScript engine type that can be set for a React instance in @ReactInstanceSettings.JSIEngineOverride")
  // Keep in sync with enum in IReactInstance.h
  enum JSIEngine
  {
    Chakra = 0,
    Hermes = 1,
    V8 = 2
  };

  [webhosthidden]
  [default_interface]
  DOC_STRING("The arguments for the @ReactInstanceSettings.InstanceCreated event.")
  runtimeclass InstanceCreatedEventArgs
  {
    DOC_STRING("Gets the @IReactContext for the React instance that was just created.")
    IReactContext Context { get; };
  }

  [webhosthidden]
  [default_interface]
  DOC_STRING("The arguments for the @ReactInstanceSettings.InstanceLoaded event.")
  runtimeclass InstanceLoadedEventArgs
  {
    DOC_STRING("Gets the @IReactContext for the React instance that finished loading the bundle.")
    IReactContext Context { get; };

    DOC_STRING("Returns `true` if the JavaScript bundle failed to load.")
    Boolean Failed { get; };
  }

  [webhosthidden]
  [default_interface]
  DOC_STRING("The arguments for the @ReactInstanceSettings.InstanceDestroyed event.")
  runtimeclass InstanceDestroyedEventArgs
  {
    DOC_STRING("Gets the @IReactContext for the React instance that just destroyed.")
    IReactContext Context { get; };
  }

  [webhosthidden]
  DOC_STRING("Provides settings to create a React instance.")
  runtimeclass ReactInstanceSettings
  {
    DOC_STRING("Creates new instance of @ReactInstanceSettings")
    ReactInstanceSettings();

    DOC_STRING(
      "Gets a @IReactPropertyBag to share values between components and the application.\n"
      "Use @IReactContext.Properties to access this @IReactPropertyBag from native components and view managers.")
    IReactPropertyBag Properties { get; };

    DOC_STRING(
      "Gets a @IReactNotificationService to send notifications between components and the application.\n"
      "Use @IReactContext.Notifications to access this @IReactNotificationService "
      "from native components or view managers.")
    IReactNotificationService Notifications { get; };

    DOC_STRING(
      "Gets a list of @IReactPackageProvider.\n"
      "Add an implementation of @IReactPackageProvider to this list to define additional "
      "native modules and custom view managers to be included in the React instance.\n"
      "Auto-linking automatically adds @IReactPackageProvider to the application's @.PackageProviders.")
    IVector<IReactPackageProvider> PackageProviders { get; };

    DOC_STRING(
      "This controls whether various developer experience features are available for this instance. "
      "In particular, it enables the developer menu, the default `RedBox` and `LogBox` experience.")
    Boolean UseDeveloperSupport { get; set; };

    DOC_STRING(
      "The name of the JavaScript bundle file to load. This should be a relative path from @.BundleRootPath. "
      "The `.bundle` extension will be appended to the end, when looking for the bundle file.\n"
      "If using an embedded RCDATA resource, this identifies the resource ID that stores the bundle. See @.BundleRootPath.")
    DOC_DEFAULT("index.windows")
    String JavaScriptBundleFile { get; set; };

    DOC_STRING(
      "Controls whether the instance JavaScript runs in a remote environment such as within a browser.\n"
      "By default, this is using a browser navigated to http://localhost:8081/debugger-ui served by Metro/Haul.\n"
      "Debugging will start as soon as the react native instance is loaded.")
    Boolean UseWebDebugger { get; set; };

    DOC_STRING(
      "Controls whether the instance triggers the hot module reload logic when it first loads the instance.\n"
      "Most edits should be visible within a second or two without the instance having to reload.\n"
      "Non-compatible changes still cause full reloads.\n"
      "See [Fast Refresh](https://reactnative.dev/docs/fast-refresh) for more information on Fast Refresh.")
    Boolean UseFastRefresh { get; set; };

    DOC_STRING(
      "Enables live reload to load the source bundle from the React Native packager.\n"
      "When the file is saved, the packager will trigger reloading.\n")
    [deprecated("For general use this has been replaced by @.UseFastRefresh.", deprecate, 1)]
    Boolean UseLiveReload { get; set; };

    DOC_STRING(
      "Enables debugging in the JavaScript engine (if supported).\n"
      "For Chakra this enables debugging of the JS runtime directly within the app using "
      "Visual Studio -> Attach to process (Script)")
    Boolean UseDirectDebugger { get; set; };

    DOC_STRING(
      "For direct debugging, controls whether to break on the next line of JavaScript that is executed.\n"
      "This can help debug issues hit early in the JavaScript bundle load.\n"
      "***Note: this is not supported with the Chakra JS engine which is the currently used JavaScript engine. "
      "As a workaround you could add the `debugger` keyword in the beginning of the bundle.***")
    Boolean DebuggerBreakOnNextLine { get; set; };

    DOC_STRING("Flag controlling whether the JavaScript engine uses JIT compilation.")
    DOC_DEFAULT("true")
    Boolean EnableJITCompilation { get; set; };

    DOC_STRING(
      "For JS engines that support bytecode generation, this controls if bytecode should be generated when "
      "a JavaScript bundle is first loaded.\n"
      "Subsequent runs of the application should be faster as the JavaScript will be loaded from bytecode "
      "instead of the raw JavaScript.\n"
      "@.ByteCodeFileUri must be set to a location the application has write access to in order for "
      "the bytecode to be successfully cached.\n"
      "**Note that currently the byte code generation is not implemented for UWP applications.**")
    DOC_DEFAULT("false")
    Boolean EnableByteCodeCaching { get; set; };

    DOC_STRING(
      "Enables the default unhandled exception handler that logs additional information into a text file for [Windows Error Reporting](https://docs.microsoft.com/windows/win32/wer/windows-error-reporting).")
    DOC_DEFAULT("false")
    Boolean EnableDefaultCrashHandler { get; set; };

    // Deprecated
    [deprecated(
      "This property has been replaced by @.UseDeveloperSupport. "
      "In version 0.63 both properties will do the same thing. It will be removed in a future version.", deprecate, 1)]
    DOC_STRING(
      "This controls whether various developer experience features are available for this instance. "
      "In particular the developer menu, and the default `RedBox` experience.")
    Boolean EnableDeveloperMenu { get; set; };

    DOC_STRING(
      "Set this to a location the application has write access to in order for bytecode to be successfully cached. "
      "See @.EnableByteCodeCaching.\n"
      "**Note that currently the byte code generation is not implemented for UWP applications.**")
    String ByteCodeFileUri { get; set; };

    DOC_STRING(
      "When loading from a bundle server (such as metro), this is the path that will be requested from the server. "
      "If this is not provided, the value of @.JavaScriptBundleFile is used.")
    String DebugBundlePath { get; set; };

    DOC_STRING(
      "Base path used for the location of the bundle. \n"
      "This can be an `ms-appx://` or `ms-appdata://` URI (if the app is UWP or packaged using MSIX), "
      "a filesystem path, or a URI pointing at an embedded resource.\n"
      "Examples:\n\n"
      "- `ms-appx:///Bundle` - locates the bundle in the MSIX package. See [URI schemes](https://docs.microsoft.com/windows/uwp/app-resources/uri-schemes) for other UWP/MSIX valid URI formats.\n"
      "- `C:\\foo\\bar` - locates the bundle in the local filesystem. Note [UWP app file access permissions](https://docs.microsoft.com/windows/uwp/files/file-access-permissions).\n"
      "- `resource://moduleName` - locates the bundle as an embedded RCDATA resource in moduleName. Specify the resource ID in @.JavaScriptBundleFile.\n"
      "- `resource://` - locates the bundle as an embedded RCDATA resource in the running process's module. Specify the resource ID in @.JavaScriptBundleFile.\n"
    )
    DOC_DEFAULT("ms-appx:///Bundle/")
    String BundleRootPath { get; set; };

    DOC_STRING(
      "When @.UseDirectDebugger is enabled, this controls the port that the JavaScript engine debugger will run on.")
    DOC_DEFAULT("9229")
    UInt16 DebuggerPort { get; set; };

    DOC_STRING(
      "Name to associate with the JavaScript runtime when debugging. \n"
      "This name will show up in the list of JavaScript runtimes to attach to in edge://inspect or other debuggers")
    String DebuggerRuntimeName { get; set; };

    DOC_STRING(
      "Provides an extension point to allow custom error handling within the react instance. "
      "See @IRedBoxHandler for more information.")
    IRedBoxHandler RedBoxHandler { get; set; };

    DOC_STRING(
      "Function that will be hooked into the JavaScript instance as global.nativeLoggingHook. "
      "This allows native hooks for JavaScript's console implementation. "
      "If this is not set then logs will print output to the native debug output in debug builds, and no-op in release builds.")
      LogHandler NativeLogger { get; set; };

    DOC_STRING(
      "Control the main UI dispatcher to be used by the React instance. "
      "If the @ReactInstanceSettings object is initially created on a UI thread, then this will "
      "default to that thread. The value provided here will be available to native modules and view managers "
      "using @IReactContext.UIDispatcher")
    IReactDispatcher UIDispatcher { get; set; };

    DOC_STRING(
      "When using @.UseFastRefresh, @.UseLiveReload, or @.UseWebDebugger this is the server hostname "
      "that will be used to load the bundle from.")
    DOC_DEFAULT("localhost")
    String SourceBundleHost { get; set; };

    DOC_STRING(
      "When using @.UseFastRefresh, @.UseLiveReload, or @.UseWebDebugger this is the server port "
      "that will be used to load the bundle from.")
    DOC_DEFAULT("8081")
    UInt16 SourceBundlePort { get; set; };

    DOC_STRING(
      "When using @.UseFastRefresh, @.UseLiveReload, or @.UseWebDebugger this controls whether the bundler should include inline source maps."
      "If set, the bundler will include the source maps inline (this will improve debugging experience, but for very large bundles it could have a significant performance hit)")
    DOC_DEFAULT("true")
    Boolean RequestInlineSourceMap { get; set; };

    DOC_STRING(
      "The @JSIEngine override to be used with the React instance.\n"
      "In order for the override to work, Microsoft.ReactNative must be compiled with support of that engine. "
      "This override will be ignored when @.UseWebDebugger is set to true, since the browser must use its own "
      "engine to debug correctly.")
    DOC_DEFAULT("JSIEngine.Chakra")
    JSIEngine JSIEngineOverride { get; set; };

    DOC_STRING(
      "The @InstanceCreated event is triggered right after the React Native instance is created.\n"
      "\n"
      "It is triggered on the JSDispatcher thread before any other JSDispatcher work items.\n"
      "No JavaScript code is loaded in the JavaScript engine yet.\n"
      "The @InstanceCreatedEventArgs.Context property on the event arguments provides access to the instance context.\n"
      "\n"
      "Note that the @InstanceCreated event is triggered in response to the 'InstanceCreated' notification "
      "raised in the 'ReactNative.InstanceSettings' namespace. "
      "Consider using @Notifications to handle the notification in a dispatcher different from the JSDispatcher.")
    event Windows.Foundation.EventHandler<InstanceCreatedEventArgs> InstanceCreated;

    DOC_STRING(
      "The @InstanceLoaded event is triggered when React Native instance has finished loading the JavaScript bundle.\n"
      "\n"
      "It is triggered on the JSDispatcher thread.\n"
      "If there were errors, then the @InstanceLoadedEventArgs.Failed property on the event arguments will be true.\n"
      "The error types include:\n"
      "\n"
      "* JavaScript syntax errors.\n"
      "* Global JavaScript exceptions thrown.\n"
      "\n"
      "The @InstanceLoadedEventArgs.Context property on the event arguments provides access to the instance context.\n"
      "\n"
      "Note that the @InstanceLoaded event is triggered in response to the 'InstanceLoaded' notification "
      "raised in the 'ReactNative.InstanceSettings' namespace. "
      "Consider using @Notifications to handle the notification in a dispatcher different from the JSDispatcher.")
    event Windows.Foundation.EventHandler<InstanceLoadedEventArgs> InstanceLoaded;

    DOC_STRING(
      "The @InstanceDestroyed event is triggered when React Native instance is destroyed.\n"
      "\n"
      "It is triggered on the JSDispatcher thread as the last work item before it shuts down.\n"
      "No new JSDispatcher work can be executed after that.\n"
      "The @InstanceDestroyedEventArgs.Context property on the event arguments provides access to the instance context.\n"
      "\n"
      "Note that the @InstanceDestroyed event is triggered in response to the 'InstanceDestroyed' notification "
      "raised in the 'ReactNative.InstanceSettings' namespace. "
      "Consider using @Notifications to handle the notification in a dispatcher different from the JSDispatcher.")
    event Windows.Foundation.EventHandler<InstanceDestroyedEventArgs> InstanceDestroyed;
  }
}
