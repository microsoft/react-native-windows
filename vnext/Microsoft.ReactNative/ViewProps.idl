// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include "DocString.h"
import "IJSValueReader.idl";
import "IJSValueWriter.idl";
import "Theme.idl";

namespace Microsoft.ReactNative {

  namespace Composition.Experimental {
    [webhosthidden]
    [experimental]
    interface IInternalColor {
      Microsoft.ReactNative.Composition.Experimental.IBrush AsInternalBrush(Microsoft.ReactNative.Composition.Theme theme);
    }
  }

  [webhosthidden]
  [experimental]
  runtimeclass Color {
    Windows.UI.Color AsWindowsColor(Microsoft.ReactNative.Composition.Theme theme);
#ifdef USE_WINUI3
    Microsoft.UI.Composition.CompositionBrush AsBrush(Microsoft.ReactNative.Composition.Theme theme);
#endif

    static Color Black();
    static Color Transparent();
    static Color ReadValue(IJSValueReader reader);
    static void WriteValue(IJSValueWriter writer, Color color);
  };

  [webhosthidden]
  [experimental]
  DOC_STRING("Interface to implement custom view component properties.")
  interface IComponentProps
  {
    // TODO add an exported method to get the matching hash for a propname?
    // TODO or remove the hash from the interface?
    DOC_STRING("This method will be called for each property that comes from JavaScript.  It is up to an individual implementation to store the values of properties for access within its UpdateProps.  Properties that are part of ViewProps can be accessed from the @ViewProps object, and so do not need to be stored.")
    void SetProp(UInt32 hash, String propName, IJSValueReader value);
  };

  [default_interface]
  [webhosthidden]
  [experimental]
  DOC_STRING("Provides access to the properties on standard ViewProps.")
  unsealed runtimeclass ViewProps
  {
    Single Opacity { get; };
    Color BackgroundColor { get; };
    String TestId { get; };
    String AccessibilityLabel { get; };
    
    // TODO add accessors to all the properties on ViewProps
  };

  [webhosthidden]
  [experimental]
  enum ImageSourceType
  {
    Invalid = 0,
    Remote = 1,
    Local = 2,
  };

  [default_interface]
  [webhosthidden]
  [experimental]
  runtimeclass ImageSource
  {
    ImageSourceType Type { get; };
    String Uri { get; };
    String Bundle { get; };
    Single Scale { get; };
    Windows.Foundation.Size Size { get; };

    static ImageSource ReadValue(IJSValueReader reader);
  }

  [default_interface]
  [webhosthidden]
  [experimental]
  runtimeclass ImageProps : ViewProps
  {
    Windows.Foundation.Collections.IVectorView<ImageSource> Sources { get; };
    // TODO add accessors to all the properties on ImageProps
  }
  

} // namespace Microsoft. ReactNative
