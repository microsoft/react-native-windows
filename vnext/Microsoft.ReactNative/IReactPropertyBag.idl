// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include "DocString.h"

namespace Microsoft.ReactNative
{
  [webhosthidden]
  DOC_STRING("This delegate is used to create a @IReactPropertyBag property value on-demand.")
  delegate Object ReactCreatePropertyValue();

  [webhosthidden]
  DOC_STRING(
    "A namespace for a @IReactPropertyBag property name.\n"
    "Use @ReactPropertyBagHelper.GetNamespace to get atomic property namespace for a string.")
  interface IReactPropertyNamespace
  {
    DOC_STRING("Gets String representation of the @IReactPropertyNamespace.")
    String NamespaceName { get; };
  }

  [webhosthidden]
  DOC_STRING(
    "A name for a @IReactPropertyBag property.\n"
    "Use @ReactPropertyBagHelper.GetName to get atomic property name for a string in a @IReactPropertyNamespace.\n"
    "Each @IReactPropertyName object has a unique @.LocalName in context of the @IReactPropertyNamespace")
  interface IReactPropertyName
  {
    DOC_STRING("Gets String representation of the @IReactPropertyName.")
    String LocalName { get; };

    DOC_STRING("Gets the @IReactPropertyNamespace where the property name is defined.")
    IReactPropertyNamespace Namespace { get; };
  }

  [webhosthidden]
  DOC_STRING(
    "`IReactPropertyBag` provides a thread-safe property storage.\n"
    "Properties are identified by an instance of @IReactPropertyName. "
    "It is expected that there will be no direct use of this interface. "
    "Ideally, all usage should happen through strongly-typed accessors.")
  interface IReactPropertyBag
  {
    DOC_STRING(
      "Gets value of the `name` property.\n"
      "It returns null if the property does not exist.")
    Object Get(IReactPropertyName name);

    DOC_STRING(
      "Gets or creates value of the `name` property.\n"
      "If the property exists, then the method returns its value. "
      "If the property does not exist, then this method creates it by calling the `createValue` delegate.\n"
      "The function may return null if the `createValue` returns null when called. "
      "The `createValue` is called outside of any locks. "
      "It is possible that `createValue` result is not used when another thread sets the property value before "
      "the created value is stored.")
    Object GetOrCreate(IReactPropertyName name, ReactCreatePropertyValue createValue);

    DOC_STRING(
      "Sets property `name` to `value`.\n"
      "It returns the previously-stored property value. "
      "It returns null if the property did not exist.\n"
      "If the new value is null, then the property is removed.")
    Object Set(IReactPropertyName name, Object value);

    DOC_STRING("Copies the properties from another property bag")
    void CopyFrom(IReactPropertyBag other);
  }

  [webhosthidden]
  DOC_STRING("Helper methods for the property bag implementation.")
  static runtimeclass ReactPropertyBagHelper
  {
    [deprecated("Do not use. It will be removed in a future version.", deprecate, 1)]
    DOC_STRING("Deprecated. Do not use. It will be removed in a future version.")
    static IReactPropertyNamespace GlobalNamespace { get; };

    DOC_STRING(
      "Gets an atomic @IReactPropertyNamespace for a provided `namespaceName`.\n"
      "Consider using module name as the namespace for module-specific properties.")
    static IReactPropertyNamespace GetNamespace(String namespaceName);

    DOC_STRING(
      "Gets atomic @IReactPropertyName for the namespace `ns` and the `localName`.\n"
      "**Note that passing `null` as `ns` is reserved for local values since 0.65. "
      "In previous versions it was the same as passing @.GlobalNamespace.**")
    static IReactPropertyName GetName(IReactPropertyNamespace ns, String localName);

    DOC_STRING("Creates new instance of @IReactPropertyBag")
    static IReactPropertyBag CreatePropertyBag();
  }
} // namespace Microsoft.ReactNative
