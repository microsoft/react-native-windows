// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include "DocString.h"
import "Composition.Input.idl";
import "IJSValueReader.idl";
import "IReactContext.idl";
import "ViewProps.idl";

namespace Microsoft.ReactNative
{
  [webhosthidden]
  [experimental]
  struct LayoutMetrics {
    Windows.Foundation.Rect Frame;
    Single PointScaleFactor;
  };

  [webhosthidden]
  [experimental]
  delegate Object StateUpdateMutation(Object props);

  [flags]
  [webhosthidden]
  [experimental]
  enum ComponentViewUpdateMask
  {
    None          = 0x00000000,
    Props         = 0x00000001,
    EventEmitter  = 0x00000002,
    State         = 0x00000004,
    LayoutMetrics = 0x00000008,

    All           = 0x0000000F,
  };

  enum FocusNavigationDirection
  {
    None,
    Next,
    Previous,
    First,
    Last,
  };

  [webhosthidden]
  [experimental]
  interface IComponentState 
  {
    Object Data { get; };
    void UpdateState(Object data);
    void UpdateStateWithMutation(StateUpdateMutation mutation);
  };

  [experimental]
  [webhosthidden]
  runtimeclass LosingFocusEventArgs : Microsoft.ReactNative.Composition.Input.RoutedEventArgs {
    FocusNavigationDirection Direction { get; };
    Microsoft.ReactNative.ComponentView NewFocusedComponent { get; };
    Microsoft.ReactNative.ComponentView OldFocusedComponent { get; };

    void TryCancel();
    void TrySetNewFocusedComponent(Microsoft.ReactNative.ComponentView component);
  };

  [experimental]
  [webhosthidden]
  runtimeclass GettingFocusEventArgs : Microsoft.ReactNative.Composition.Input.RoutedEventArgs {
    FocusNavigationDirection Direction { get; };
    Microsoft.ReactNative.ComponentView NewFocusedComponent { get; };
    Microsoft.ReactNative.ComponentView OldFocusedComponent { get; };

    void TryCancel();
    void TrySetNewFocusedComponent(Microsoft.ReactNative.ComponentView component);
  };

  [experimental]
  [webhosthidden]
  runtimeclass LayoutMetricsChangedArgs {
    LayoutMetrics NewLayoutMetrics { get; };
    LayoutMetrics OldLayoutMetrics { get; };
  };


  // [exclusiveto(ComponentView)]
  // [uuid(AEE8C30B-0E56-4FB8-8A80-D5CA9DE90916)]
  // interface IComponentViewFactory
  // {
  // }

  // [composable(IComponentViewFactory, protected)]
  [experimental]
  [webhosthidden]
  unsealed runtimeclass ComponentView {
    Int32 Tag { get; };
    ComponentView Parent { get; };
    IVectorView<ComponentView> Children { get; };
    IReactContext ReactContext { get; };
    LayoutMetrics LayoutMetrics { get; };
    IInspectable UserData;

    Boolean TryFocus();

    DOC_STRING("Used to handle key down events when this component is focused, or if a child component did not handle the key down")
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.KeyRoutedEventArgs> KeyDown;
    DOC_STRING("Used to handle key up events when this component is focused, or if a child component did not handle the key up")
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.KeyRoutedEventArgs> KeyUp;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.CharacterReceivedRoutedEventArgs> CharacterReceived;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.PointerRoutedEventArgs> PointerPressed;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.PointerRoutedEventArgs> PointerReleased;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.PointerRoutedEventArgs> PointerMoved;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.PointerRoutedEventArgs> PointerWheelChanged;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.PointerRoutedEventArgs> PointerEntered;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.PointerRoutedEventArgs> PointerExited;
    event Windows.Foundation.EventHandler<ComponentView> PointerCaptureLost;
    
    event Windows.Foundation.EventHandler<ComponentView> Destroying;
    event Windows.Foundation.EventHandler<LayoutMetricsChangedArgs> LayoutMetricsChanged;
    event Windows.Foundation.EventHandler<ComponentView> Mounted;
    event Windows.Foundation.EventHandler<ComponentView> Unmounted;
    event Windows.Foundation.EventHandler<LosingFocusEventArgs> LosingFocus;
    event Windows.Foundation.EventHandler<GettingFocusEventArgs> GettingFocus;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.RoutedEventArgs> LostFocus;
    event Windows.Foundation.EventHandler<Microsoft.ReactNative.Composition.Input.RoutedEventArgs> GotFocus;
  };

} // namespace Microsoft.ReactNative
