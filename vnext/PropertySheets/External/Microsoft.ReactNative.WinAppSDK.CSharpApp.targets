<?xml version="1.0" encoding="utf-8"?>
<!-- 
  Copyright (c) Microsoft Corporation.
  Licensed under the MIT License.

  This file will be consumed by ALL WinAppSDK C# app projects (both inside
  and outside of this repo) that build on top of Microsoft.ReactNative.
  Do not make any changes here unless it applies to ALL such projects.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(ReactNativeWindowsDir)PropertySheets\External\Microsoft.ReactNative.Common.targets" />

  <Import Project="$(ReactNativeWindowsDir)PropertySheets\External\Microsoft.ReactNative.WinAppSDK.CSharp.PackageReferences.props" />

  <ItemGroup>
    <SDKReference Include="Microsoft.VCLibs, Version=14.0" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetPlatformVersion)'=='10.0.19041.0'">
    <FrameworkReference Update="Microsoft.Windows.SDK.NET.Ref" RuntimeFrameworkVersion="10.0.19041.27" />
    <FrameworkReference Update="Microsoft.Windows.SDK.NET.Ref" TargetingPackVersion="10.0.19041.27" />
  </ItemGroup>
  
  <ItemGroup>
    <!-- WinUI package name and version are set by WinUI.props -->
    <PackageReference Include="$(WinUIPackageName)" Version="$(WinUIPackageVersion)" Condition="'$(OverrideWinUIPackage)'!='true'" />
    <!-- Hermes version is set by JSEngine.props -->
    <PackageReference Include="ReactNative.Hermes.Windows" Version="$(HermesVersion)" Condition="$(UseHermes)" />
  </ItemGroup>

  <!-- Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
      Tools extension to be activated for this project even if the Windows App SDK Nuget
      package has not yet been restored -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnablePreviewMsixTooling)'=='true'">
    <ProjectCapability Include="Msix"/>
  </ItemGroup>
  
  <!-- Workaround for https://github.com/microsoft/WindowsAppSDK/issues/1856, can remove when we update to WinAppSDK >= 1.2.220930.4-preview2 -->
  <Target Name="RemoveCollidingDepsJson" AfterTargets="GetPackagingOutputs" BeforeTargets="_ComputeAppxPackagePayload">
		<!-- If conflicting build and publish deps.json files are present, use only the publish deps.json, 
            and remove the corresponding build deps.json. -->
		<ItemGroup Condition="'@(PackagingOutputs)'!=''" >
			<_PublishDepsJson Include="@(PackagingOutputs->WithMetadataValue('OutputGroup', 'PublishItemsOutputGroupOutput'))"
                Condition="$([System.String]::Copy('%(FileName)%(Extension)').EndsWith('.deps.json'))" />
			<_BuildDepsJson Include="@(PackagingOutputs->WithMetadataValue('OutputGroup', 'GetCopyToOutputDirectoryItemsOutputGroup'))"
                Condition="$([System.String]::Copy('%(FileName)%(Extension)').EndsWith('.deps.json'))" />
			<PackagingOutputs Condition="'@(_PublishDepsJson)'!='' and '@(_BuildDepsJson)'!=''" Remove="@(_BuildDepsJson)"/>
		</ItemGroup>
	</Target>


</Project>