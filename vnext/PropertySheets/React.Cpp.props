<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Label="Globals">
    <DefaultLanguage>en-US</DefaultLanguage>
    <MinimumVisualStudioVersion>16.0</MinimumVisualStudioVersion>
    <!-- Use 19H1 SDK (10.0.18362.0)  Support running on RS3+ (10.0.16299.0) -->
    <WindowsTargetPlatformVersion>10.0.18362.0</WindowsTargetPlatformVersion>
    <WindowsTargetPlatformMinVersion>10.0.16299.0</WindowsTargetPlatformMinVersion>
  </PropertyGroup>

  <PropertyGroup Label="Configuration">
    <PlatformToolset>$(DefaultPlatformToolset)</PlatformToolset>
    <GenerateProjectSpecificOutputFolder>false</GenerateProjectSpecificOutputFolder>
    <CharacterSet>Unicode</CharacterSet>
    <EnableWinRtLeanAndMean Condition="'$(EnableWinRtLeanAndMean)' == ''">true</EnableWinRtLeanAndMean>
    <LinkIncremental Condition="'$(LinkIncremental)' == '' and '$(Configuration)'=='Debug'" Label="Configuration">true</LinkIncremental>
    <LinkIncremental Condition="'$(LinkIncremental)' == '' and '$(Configuration)'=='Release'" Label="Configuration">false</LinkIncremental>
  </PropertyGroup>

  <PropertyGroup Label="Desktop">
    <!-- See https://docs.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt -->
    <WinVer>_WIN32_WINNT_WIN8</WinVer>
  </PropertyGroup>

  <Import Project="$(ReactNativeWindowsDir)PropertySheets\ReactPatches.targets" />

  <PropertyGroup>
    <USE_HERMES Condition="'$(USE_HERMES)' == ''">false</USE_HERMES>
    <HERMES_Version Condition="'$(HERMES_Version)' == ''">0.5.0-f56606a8</HERMES_Version>
    <HERMES_Package Condition="'$(HERMES_Package)' == ''">$(SolutionDir)packages\ReactNative.Hermes.Windows.$(HERMES_Version)</HERMES_Package>
    <!-- TODO: Can we automatically distinguish between uwp and win32 here? -->
    <HERMES_ARCH Condition="'$(HERMES_ARCH)' == ''">uwp</HERMES_ARCH>

    <USE_V8 Condition="('$(USE_V8)' == '') OR ('$(Platform)' == 'ARM')">false</USE_V8>
    <V8_Version Condition="'$(V8_Version)' == ''">0.63.16</V8_Version>
    <V8_Package Condition="'$(V8_Package)' == '' AND '$(V8AppPlatform)' == 'win32'">$(SolutionDir)packages\ReactNative.V8Jsi.Windows.$(V8_Version)</V8_Package>
    <V8_Package Condition="'$(V8_Package)' == '' AND '$(V8AppPlatform)' != 'win32'">$(SolutionDir)packages\ReactNative.V8Jsi.Windows.UWP.$(V8_Version)</V8_Package>

    <!-- Enables React-Native-Windows ETW Provider : React-Native-Windows-Provider  -->
    <ENABLE_ETW_TRACING Condition="'$(ENABLE_ETW_TRACING)' == ''">true</ENABLE_ETW_TRACING>

    <!-- Enables routing Systrace events from JavaScript code to our ETW provider -->
    <ENABLE_JS_SYSTRACE_TO_ETW Condition="'$(ENABLE_JS_SYSTRACE_TO_ETW)' == ''">true</ENABLE_JS_SYSTRACE_TO_ETW>
  </PropertyGroup>

  <!--
    Tracing definitions may be checked in Facebook headers. Make sure they get
    defined for anything with the potential to include them.
  -->
  <ItemDefinitionGroup>
    <ClCompile>
      <PreprocessorDefinitions Condition="'$(ENABLE_ETW_TRACING)'=='true'">ENABLE_ETW_TRACING;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(ENABLE_JS_SYSTRACE_TO_ETW)'=='true'">ENABLE_JS_SYSTRACE_TO_ETW;WITH_FBSYSTRACE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(USE_HERMES)'=='true'">USE_HERMES;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(USE_V8)'=='true'">USE_V8;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <!-- This prop is used for shared JSI code and headers -->
    <JSI_Source Condition="'$(JSI_Source)' == ''">$(ReactNativeDir)\ReactCommon\jsi</JSI_Source>

    <!-- This prop is used for JSI code that may be overridden in external JSI implementations -->
    <JSI_SourcePath Condition="'$(JSI_SourcePath)' == ''">$(ReactNativeDir)\ReactCommon\jsi</JSI_SourcePath>
    <JSI_SourcePath Condition="'$(USE_V8)' == 'true'">$(V8_Package)\build\native\include</JSI_SourcePath>
    <JSI_SourcePath Condition="'$(USE_HERMES)' == 'true'">$(HERMES_Package)\build\native\include</JSI_SourcePath>

    <!-- This disables copying the v8 DLL to outputs; it is re-enabled locally in win32 projects -->
    <V8JSI_NODLLCOPY>true</V8JSI_NODLLCOPY>
  </PropertyGroup>

  <ImportGroup Label="Defaults">
    <Import Project="$(Platform).props" />
    <Import Project="$(Configuration).props" />
  </ImportGroup>

  <ImportGroup Label="ConfigurationType">
    <Import Project="$(ConfigurationType)\$(Platform).props" />
    <Import Project="$(ConfigurationType)\$(Configuration).props" />
  </ImportGroup>

  <ItemDefinitionGroup>
    <ClCompile>
      <!--
        BOOST_ALL_NO_LIB              - Don't require prebuilt Boost DateTime LIB.
        BOOST_ERROR_CODE_HEADER_ONLY  - Compile Boost error_code members inline. Requires BOOST_SYSTEM_SOURCE.
        BOOST_NO_RTTI                 - Configure Boost not to use dynamic_cast
        BOOST_NO_TYPEID               - Configure boost not to check typeid (not to use RTTI)
        BOOST_SYSTEM_SOURCE           - Build boost::system symbols from sources (drop dependency on boost_system.lib).
        GTEST_HAS_RTTI                - Let GTest know not to use RTTI
        WIN32_LEAN_AND_MEAN           - Reduce the Windows API included surface.
        WINRT_LEAN_AND_MEAN           - Disable rarely used cppwinrt templates that impact compile-time/PCH size.
      -->
      <PreprocessorDefinitions>
        _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS;
        BOOST_ALL_NO_LIB=1;
        BOOST_ERROR_CODE_HEADER_ONLY;
        BOOST_NO_RTTI;
        BOOST_NO_TYPEID;
        BOOST_SYSTEM_SOURCE;
        GTEST_HAS_RTTI=0;
        WIN32_LEAN_AND_MEAN;
        %(PreprocessorDefinitions)
      </PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(EnableWinRtLeanAndMean)' == 'true'">
        WINRT_LEAN_AND_MEAN;
        %(PreprocessorDefinitions)
      </PreprocessorDefinitions>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <RuntimeTypeInfo>false</RuntimeTypeInfo>
      <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>
      <ShowIncludes Condition="'$(ShowIncludes)' == 'true'">true</ShowIncludes>
    </ClCompile>
  </ItemDefinitionGroup>

  <!--
    #4804: CxxFrameHandler4 leads to generated code that incompatible with VS
    2015 and 2017. Disable it until consumers are updated or on an ABI-safe API
  -->
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalOptions>/d2FH4- %(AdditionalOptions)</AdditionalOptions>
    </ClCompile>
    <Link>
      <AdditionalOptions>/d2:-FH4- %(AdditionalOptions)</AdditionalOptions>
    </Link>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup Condition="'$(ConfigurationType)' == 'Application' OR '$(ConfigurationType)' == 'DynamicLibrary'">
    <Link>
      <SubSystem>Console</SubSystem>
    </Link>
  </ItemDefinitionGroup>

</Project>
