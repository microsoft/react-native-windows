<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <PlatformTarget>x64</PlatformTarget>
    <RuntimeIdentifiers>win-x64</RuntimeIdentifiers>
    <IsPackable>false</IsPackable>
    <Platforms>x64;x86;ARM;ARM64</Platforms>
  </PropertyGroup>

  <ItemGroup>
    <AvailableItemName Include="Lkg" />
    <Lkg Include="CodeGen\Lkg\*.lkg" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.7.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="3.7.0" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.5.0" />
    <PackageReference Include="MSTest.TestAdapter" Version="2.1.2" />
    <PackageReference Include="MSTest.TestFramework" Version="2.1.2" />
    <PackageReference Include="coverlet.collector" Version="1.3.0" />

    <!-- 
      NuGet decides to pull in packages with issues. There is no seeming way to diagnose why NuGet is pulling in those versions. 
      Running restore with -Verbosity Detailed and environment variables:
       * NUGET_RESTORE_MSBUILD_ARGS=/bl:c:\temp\nuget.binlog
       * NUGET_RESTORE_MSBUILD_VERBOSITY=diag
      resulted in no mention of version 4.3.0 anywhere until NuGet just starts downloading it.
      Therefore manually overriding the version so NuGet uses the latest.
    -->
     <PackageReference Include="System.Private.Uri" Version="4.3.2" />
  </ItemGroup>

   <!-- Ensure the Win10 SDK binaries loaded by the unittest match our apps SDK versions -->
  <PropertyGroup>
    <WindowsTargetPlatformVersion>10.0.19041.0</WindowsTargetPlatformVersion>
    <WindowsTargetPlatformVersionEncoded>$(WindowsTargetPlatformVersion.Replace('.', '_'))</WindowsTargetPlatformVersionEncoded>
    <DefineConstants>$(p:DefineConstants);win10SdkVersion$(WindowsTargetPlatformVersionEncoded)</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="CodeGen\Lkg\" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Microsoft.ReactNative.Managed.CodeGen\Microsoft.ReactNative.Managed.CodeGen.csproj" />
  </ItemGroup>

  <Target Name="CopyLkgFiles" AfterTargets="Build">
    <Copy SourceFiles="@(Lkg)" DestinationFiles="@(Lkg->'$(OutDir)Lkg\%(Filename)%(Extension)')" />

    <ItemGroup>
      <FileWrites Include="@(Lkg->'$(OutDir)Lkg\%(Filename)%(Extension)')" />
    </ItemGroup>
  </Target>

  <Target Name="EnsureRuntimeDependenciesAreBuilt" AfterTargets="Build">
    <ItemGroup>
      <_ReactNativeManagedCodeGenUnitTestRuntimeDependencies Include="..\Microsoft.ReactNative.Managed\Microsoft.ReactNative.Managed.csproj" />
      <!--
        This project should be built as well before the unittest can run, but when building in VS this sometimes gives the following error:
          \vnext\packages\Microsoft.Windows.CppWinRT.2.0.210312.4\build\native\Microsoft.Windows.CppWinRT.targets(158,13): error MSB4006: There is a circular dependency in the target dependency graph involving target "ComputeGetResolvedWinMD". [\vnext\Microsoft.ReactNative\Microsoft.ReactNative.vcxproj]
        Microsoft.ReactNative.Managed.vcxproj is luckily a dependency of Microsoft.ReactNative.Managed.csproj so we can safely ommit it here.
        
        <_ReactNativeManagedCodeGenUnitTestRuntimeDependencies Include="..\Microsoft.ReactNative\Microsoft.ReactNative.vcxproj" />
      -->
    </ItemGroup>
    <MSBuild
      Projects="@(_ReactNativeManagedCodeGenUnitTestRuntimeDependencies)" 
      BuildInParallel="$(BuildInParallel)" 
      Properties="Configuration=$(Configuration); Platform=$(Platform)" 
      ContinueOnError="$(ContinueOnError)" 
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
    </MSBuild>
  </Target>

</Project>

