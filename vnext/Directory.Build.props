<?xml version="1.0" encoding="utf-8"?>
<Project>

  <!-- This import will noop when customer code is built. This import is here to help building the bits in the react-native-windows repository. -->
  <Import Condition="Exists($([MSBuild]::GetPathOfFileAbove('Directory.Build.props', '$(MSBuildThisFileDirectory)../')))" Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.props', '$(MSBuildThisFileDirectory)../'))" />

  <PropertyGroup>
    <SolutionDir Condition="'$(SolutionDir)' == '' OR '$(SolutionDir)' == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>

    <Platform Condition="'$(Platform)' == ''">x64</Platform>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>

    <!-- This property sets the CscTask to print the full path of the csharp file on errors and warnings rather than just the filename. -->
    <GenerateFullPaths>true</GenerateFullPaths>

    <!-- 
      SourceLink is disabled by default since customer projects are still building our projects and therefore we don't want to force customers to use this.
      The PR (windows-vs-pr.yml) and CI (publish.yml() turn it back on.
    -->
    <EnableSourceLink Condition="'$(EnableSourceLink)' == ''">false</EnableSourceLink>
    <FollyVersion>2021.06.28.00</FollyVersion>
    <FmtVersion>7.1.3</FmtVersion>
  </PropertyGroup>

  <PropertyGroup Label="Configuration">
    <ProjectName Condition="'$(ProjectName)'==''">$(MSBuildProjectName)</ProjectName>
  </PropertyGroup>

  <!--
    IMPORTANT: Traversals left in a directory will break some tools like midl, but we also cannot call
    [MSBuild]::NormalizeDirectory on relative paths since cwd is not always correct. This logic should prefer to operate
    on full paths and avoid extra normalization.
  -->
  <PropertyGroup>
    <ReactNativeWindowsDir Condition="'$(ReactNativeWindowsDir)' == ''">$(MSBuildThisFileDirectory)</ReactNativeWindowsDir>
    <ReactNativePackageDir Condition="'$(ReactNativePackageDir)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'node_modules\react-native\package.json'))\node_modules\react-native\</ReactNativePackageDir>

    <RootIntDir>$(ReactNativeWindowsDir)\build</RootIntDir>
    <RootOutDir>$(ReactNativeWindowsDir)\target</RootOutDir>
    <!-- Visual Studio forces using 'Win32' for the 'x86' platform. -->
    <BaseIntDir Condition="'$(Platform)' != 'Win32'">$(RootIntDir)\$(Platform)\$(Configuration)</BaseIntDir>
    <BaseIntDir Condition="'$(Platform)' == 'Win32'">$(RootIntDir)\x86\$(Configuration)</BaseIntDir>
    <BaseOutDir Condition="'$(Platform)' != 'Win32'">$(RootOutDir)\$(Platform)\$(Configuration)</BaseOutDir>
    <BaseOutDir Condition="'$(Platform)' == 'Win32'">$(RootOutDir)\x86\$(Configuration)</BaseOutDir>

    <IntDir>$(BaseIntDir)\$(ProjectName)\</IntDir>
    <OutDir>$(BaseOutDir)\$(ProjectName)\</OutDir>
    <PublishDir>$(OutDir)\Publish\</PublishDir>

    <GeneratedFilesDir>$(IntDir)Generated Files\</GeneratedFilesDir>
    <ReactNativeDir Condition="'$(ReactNativeDir)' == ''">$(ReactNativePackageDir)</ReactNativeDir>

    <YogaDir Condition="'$(YogaDir)' == ''">$(ReactNativeDir)ReactCommon\yoga</YogaDir>

    <FollyDir Condition="'$(FollyDir)' == '' AND Exists('$([MSBuild]::NormalizeDirectory($(ReactNativePackageDir)..\..\node_modules))')">$(ReactNativePackageDir)..\..\node_modules\.folly\folly-$(FollyVersion)</FollyDir>
    <FollyDir>$([MSBuild]::NormalizeDirectory($(FollyDir)))</FollyDir>

    <FmtDir Condition="'$(FmtDir)' == '' AND Exists('$([MSBuild]::NormalizeDirectory($(ReactNativePackageDir)..\..\node_modules))')">$(ReactNativePackageDir)..\..\node_modules\.fmt\fmt-$(FmtVersion)</FmtDir>
    <FmtDir>$([MSBuild]::NormalizeDirectory($(FmtDir)))</FmtDir>
  </PropertyGroup>

</Project>
