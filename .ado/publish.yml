name: 0.0.$(Date:yyMM.d)$(Rev:rrr)

parameters:
- name: skipNpmPublish
  displayName: Skip Npm Publish
  type: boolean
  default: false
- name: skipGitPush
  displayName: Skip Git Push
  type: boolean
  default: false
- name: stopOnNoCI
  displayName: Stop if latest commit is ***NO_CI***
  type: boolean
  default: true
- name: AgentPool
  type: object
  default:
    Medium:
      name: rnw-pool-4-microsoft
      demands: ImageOverride -equals rnw-img-vs2022-node18
    Large:
      name: rnw-pool-8-microsoft
      demands: ImageOverride -equals rnw-img-vs2022-node18

- name: desktopBuildMatrix
  type: object
  default:
    - Name: X64Debug
      BuildConfiguration: Debug
      BuildPlatform: x64
      UseFabric: false
    - Name: X64Release
      BuildConfiguration: Release
      BuildPlatform: x64
      UseFabric: false
    - Name: X86Debug
      BuildConfiguration: Debug
      BuildPlatform: x86
      UseFabric: false
    - Name: X86Release
      BuildConfiguration: Release
      BuildPlatform: x86
      UseFabric: false
    - Name: ARM64Debug
      BuildConfiguration: Debug
      BuildPlatform: ARM64
      UseFabric: false
    - Name: ARM64Release
      BuildConfiguration: Release
      BuildPlatform: ARM64
      UseFabric: false
    - Name: X64DebugFabric
      BuildConfiguration: Debug
      BuildPlatform: x64
      UseFabric: true
    - Name: X64ReleaseFabric
      BuildConfiguration: Release
      BuildPlatform: x64
      UseFabric: true
    - Name: X86DebugFabric
      BuildConfiguration: Debug
      BuildPlatform: x86
      UseFabric: true
    - Name: X86ReleaseFabric
      BuildConfiguration: Release
      BuildPlatform: x86
      UseFabric: true


variables:
  - template: variables/windows.yml
  - group: RNW Secrets
  - name: SkipNpmPublishArgs
    value: ''
  - name: SkipGitPushPublishArgs
    value: ''
  - name: FailCGOnAlert
    value: false
  - name: EnableCodesign
    value: false
  - name: ArtifactServices.Symbol.AccountName
    value: microsoft
  - name: ArtifactServices.Symbol.PAT
    value: $(pat-symbols-publish-microsoft)

trigger: none
pr: none

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool: ${{ parameters.AgentPool.Medium }}
    customBuildTags:
    - ES365AIMigrationTooling
    sdl:
      credscan:
          suppressionsFile: $(Build.SourcesDirectory)\.ado\config\CredScanSuppressions.json
      spotBugs:
          enabled: false # We don't have any java, but random packages in node_modules do
    stages:
    - stage: RNWPublish
      jobs:
        - job: RnwNpmPublish
          displayName: React-Native-Windows Npm Build Rev Publish
          pool: ${{ parameters.AgentPool.Medium }}
          timeoutInMinutes: 120
          cancelTimeoutInMinutes: 5
          steps:
          - powershell: |
              Write-Host "Stopping because commit message contains ***NO_CI***."
              $uri = "https://dev.azure.com/microsoft/ReactNative/_apis/build/builds/$(Build.BuildId)?api-version=5.1"
              $json = @{status="Cancelling"} | ConvertTo-Json -Compress
              $build = Invoke-RestMethod -Uri $uri -Method Patch -Headers @{Authorization = "Bearer $(System.AccessToken)"} -ContentType "application/json" -Body $json
              Write-Host $build
              Write-Host "Waiting 60 seconds for build cancellation..."
              Start-Sleep -Seconds 60
            displayName: Stop pipeline if latest commit message contains ***NO_CI***
            condition: and(${{ parameters.stopOnNoCI }}, contains(variables['Build.SourceVersionMessage'], '***NO_CI***'))

          - template: .ado/templates/checkout-full.yml@self
            parameters:
              persistCredentials: false # We're going to use rnbot's git creds to publish

          - powershell: gci env:/BUILD_*
            displayName: Show build information  

          - template: .ado/templates/prepare-js-env.yml@self

          - template: .ado/templates/run-compliance-prebuild.yml@self

          - template: .ado/templates/configure-git.yml@self

          - script: |
              echo ##vso[task.setvariable variable=SkipNpmPublishArgs]--no-publish
            displayName: Enable No-Publish
            condition: ${{ parameters.skipNpmPublish }}

          - script: |
              echo ##vso[task.setvariable variable=SkipGitPushPublishArgs]--no-push
            displayName: Enable No-Publish
            condition: ${{ parameters.skipGitPush }}

          - script: if not exist %USERPROFILE%\AppData\Roaming\npm (mkdir %USERPROFILE%\AppData\Roaming\npm)
            displayName: Fix missing npm config

          - pwsh: |
              npx beachball check --verbose 2>&1 | Tee-Object -Variable beachballOutput
              $beachballOutput | Where-Object { $_ -match "ERROR: *"} | ForEach { Write-Host "##vso[task.logissue type=error]$_" }
            displayName: Beachball Check

          - script: npx beachball publish $(SkipNpmPublishArgs) $(SkipGitPushPublishArgs) --branch origin/$(Build.SourceBranchName) -n $(npmAuthToken) -yes --bump-deps --verbose --access public --message "applying package updates ***NO_CI***"
            displayName: Beachball Publish

          # Beachball reverts to local state after publish, but we want the updates it added
          - script: git pull origin ${{ variables['Build.SourceBranchName'] }}
            displayName: git pull

          - script: npx @rnw-scripts/create-github-releases --yes --authToken $(githubAuthToken)
            displayName: Create GitHub Releases (New Canary Version)
            condition: and(succeeded(), ${{ not(parameters.skipGitPush) }}, ${{ eq(variables['Build.SourceBranchName'], 'main') }} )

          - script: npx --yes @rnw-scripts/create-github-releases@latest --yes --authToken $(githubAuthToken)
            displayName: Create GitHub Releases (New Stable Version)
            condition: and(succeeded(), ${{ not(parameters.skipGitPush) }}, ${{ ne(variables['Build.SourceBranchName'], 'main') }} )

          - template: .ado/templates/set-version-vars.yml@self
            parameters:
              buildEnvironment: Continuous

          - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
            displayName: ðŸ“’ Generate Manifest Npm
            inputs:
              BuildDropPath: $(System.DefaultWorkingDirectory)

          templateContext:
            outputs:
              - output: pipelineArtifact
                displayName: "ðŸ“’ Publish Manifest Npm"
                artifactName: SBom-$(System.JobAttempt)
                targetPath: $(System.DefaultWorkingDirectory)/_manifest
                sbomEnabled: false # This output is in fact an SBOM itself
              - output: pipelineArtifact
                displayName: 'Publish version variables'
                targetPath: $(Build.StagingDirectory)/versionEnvVars
                artifactName: VersionEnvVars

        - ${{ each matrix in parameters.desktopBuildMatrix }}:
          - job: RnwNativeBuildDesktop${{ matrix.Name }}
            displayName: Build Desktop ${{ matrix.Name }}
            dependsOn: RnwNpmPublish
            pool: ${{ parameters.AgentPool.Large }}
            timeoutInMinutes: 360 # CodeQL requires 3x usual build timeout
            steps:
            - template: .ado/templates/prepare-js-env.yml@self

            - template: .ado/templates/prepare-build-env.yml@self
              parameters:
                platform: ${{ matrix.BuildPlatform }}
                configuration: ${{ matrix.BuildConfiguration }}
                buildEnvironment: Publish

            - template: .ado/templates/apply-published-version-vars.yml@self

            - ${{ if eq(matrix.UseFabric, true) }}:
              - template: .ado/templates/enable-fabric-experimental-feature.yml@self

            - template: .ado/templates/msbuild-sln.yml@self
              parameters:
                solutionDir: vnext
                solutionName: ReactWindows-Desktop.sln
                buildPlatform: ${{ matrix.BuildPlatform }}
                buildConfiguration: ${{ matrix.BuildConfiguration }}
                oneESMode: true ## Files are only copied to staging, not published

            - template: .ado/templates/publish-build-artifacts.yml@self
              parameters:
                oneESMode: true ## Files are only copied to staging, not published
                ${{ if eq(matrix.UseFabric, true) }}:
                  artifactName: DesktopFabric
                ${{ if eq(matrix.UseFabric, false) }}:
                  artifactName: Desktop
                buildPlatform: ${{ matrix.BuildPlatform }}
                buildConfiguration: ${{ matrix.BuildConfiguration }}
                contents: |
                  React.Windows.Desktop\**
                  React.Windows.Desktop.DLL\**
                  React.Windows.Desktop.Test.DLL\**

            - template: .ado/templates/component-governance.yml@self

            templateContext:
              sdl:
                binskim:
                  analyzeTargetGlob: '$(Build.SourcesDirectory)\vnext\target\${{ matrix.BuildPlatform }}\${{ matrix.BuildConfiguration }}\React.Windows.Desktop.DLL\react-native-win32.dll'
              outputs:
              - output: pipelineArtifact
                displayName: 'Upload build logs'
                condition: succeededOrFailed()
                targetPath: $(BuildLogDirectory)
                artifactName: Build logs - $(Agent.JobName)-$(System.JobAttempt)
              - output: pipelineArtifact
                displayName: 'Upload crash dumps'
                condition: and(succeededOrFailed(), eq(variables.HasCrashDumps, 'True'))
                targetPath: '$(CrashDumpRootPath)'
                artifactName: Crash dumps - $(Agent.JobName)-$(System.JobAttempt)
              - output: pipelineArtifact
                ${{ if eq(matrix.UseFabric, true) }}:
                  displayName: 'Publish Artifact: DesktopFabric.${{matrix.buildPlatform}}.${{matrix.buildConfiguration}}'
                  artifactName: DesktopFabric.${{matrix.buildPlatform}}.${{matrix.buildConfiguration}}
                  targetPath: $(Build.StagingDirectory)/NuGet/DesktopFabric/${{matrix.buildPlatform}}/${{matrix.buildConfiguration}}
                ${{ if eq(matrix.UseFabric, false) }}:
                  displayName: 'Publish Artifact: Desktop.${{matrix.buildPlatform}}.${{matrix.buildConfiguration}}'
                  artifactName: Desktop.${{matrix.buildPlatform}}.${{matrix.buildConfiguration}}
                  targetPath: $(Build.StagingDirectory)/NuGet/Desktop/${{matrix.buildPlatform}}/${{matrix.buildConfiguration}}

        - job: RnwNativeBuildUniversal
          displayName: Build Universal
          dependsOn: RnwNpmPublish
          strategy:
            matrix:
              X64Release:
                BuildConfiguration: Release
                BuildPlatform: x64
              X86Release:
                BuildConfiguration: Release
                BuildPlatform: x86
              Arm64Release:
                BuildConfiguration: Release
                BuildPlatform: ARM64
              X64Debug:
                BuildConfiguration: Debug
                BuildPlatform: x64
              X86Debug:
                BuildConfiguration: Debug
                BuildPlatform: x86
              Arm64Debug:
                BuildConfiguration: Debug
                BuildPlatform: ARM64          
          pool: ${{ parameters.AgentPool.Large }}
          timeoutInMinutes: 360 # CodeQL requires 3x usual build timeout

          steps:
          - template: .ado/templates/prepare-js-env.yml@self

          - template: .ado/templates/prepare-build-env.yml@self
            parameters:
              platform: $(BuildPlatform)
              configuration: $(BuildConfiguration)
              buildEnvironment: Publish

          - template: .ado/templates/apply-published-version-vars.yml@self

          - template: .ado/templates/msbuild-sln.yml@self
            parameters:
              solutionDir: vnext
              solutionName: Microsoft.ReactNative.sln
              buildPlatform: $(BuildPlatform)
              buildConfiguration: $(BuildConfiguration)
              oneESMode: true ## Files are only copied to staging, not published

          - task: PowerShell@2
            displayName: Make AnyCPU Reference Assemblies
            inputs:
              filePath: vnext/Scripts/Tfs/Make-AnyCPU-RefAssemblies.ps1
              arguments: -TargetRoot $(Build.SourcesDirectory)\vnext\target -BuildRoot $(Build.SourcesDirectory)\vnext\target

          - template: .ado/templates/publish-build-artifacts.yml@self
            parameters:
              oneESMode: true ## Files are only copied to staging, not published
              artifactName: ReactWindows
              buildPlatform: $(BuildPlatform)
              buildConfiguration: $(BuildConfiguration)
              contents: |
                Microsoft.ReactNative\**
                Microsoft.ReactNative.Managed\**
                Microsoft.ReactNative.Managed.CodeGen\**

          - template: .ado/templates/component-governance.yml@self

          # Make symbols available through http://symweb.
          - task: PublishSymbols@2
            displayName: Publish symbols
            inputs:
              SearchPattern: vnext/target/**/*.pdb
              SymbolServerType: TeamServices
          
          templateContext:
            sdl:
              binskim:
                analyzeTargetGlob: '$(Build.SourcesDirectory)\vnext\target\$(BuildPlatform)\$(BuildConfiguration)\Microsoft.ReactNative\Microsoft.ReactNative.dll'
            outputs:
            - output: pipelineArtifact
              displayName: 'Upload build logs'
              condition: succeededOrFailed()
              targetPath: $(BuildLogDirectory)
              artifactName: Build logs - $(Agent.JobName)-$(System.JobAttempt)
            - output: pipelineArtifact
              displayName: 'Upload crash dumps'
              condition: and(succeededOrFailed(), eq(variables.HasCrashDumps, 'True'))
              targetPath: '$(CrashDumpRootPath)'
              artifactName: Crash dumps - $(Agent.JobName)-$(System.JobAttempt)
            - output: pipelineArtifact
              displayName: 'Publish Artifact: ReactWindows.$(BuildPlatform).$(BuildConfiguration)'
              artifactName: ReactWindows.$(BuildPlatform).$(BuildConfiguration)
              targetPath: $(Build.StagingDirectory)/NuGet/ReactWindows/$(BuildPlatform)/$(BuildConfiguration)

        - job: RNWNuget
          dependsOn:
            - RnwNpmPublish
            - ${{ each matrix in parameters.desktopBuildMatrix }}:
              - RnwNativeBuildDesktop${{ matrix.Name }}
            - RnwNativeBuildUniversal
          displayName: Sign Binaries and Publish NuGet
          pool: ${{ parameters.AgentPool.Medium }}
          timeoutInMinutes: 120 # Protect against the long CodeSign task

          steps:
          - template: .ado/templates/checkout-shallow.yml@self

          - template: .ado/templates/prepare-js-env.yml@self

          - template: .ado/templates/apply-published-version-vars.yml@self

          # The commit tag in the nuspec requires that we use at least nuget 5.8 (because things break with nuget versions before and Vs 16.8 or later)
          - task: NuGetToolInstaller@1
            inputs:
              versionSpec: ">=5.8.0"

          - template: .ado/templates/prep-and-pack-nuget.yml@self
            parameters:
              artifactName: ReactWindows
              publishCommitId: $(publishCommitId)
              npmVersion: $(npmVersion)
              nugetroot: $(System.DefaultWorkingDirectory)\ReactWindows
              packMicrosoftReactNative: true
              packMicrosoftReactNativeCxx: true
              packMicrosoftReactNativeManaged: true
              packMicrosoftReactNativeManagedCodeGen: true
              ${{ if or(eq(variables['EnableCodesign'], 'true'), endsWith(variables['Build.SourceBranchName'], '-stable')) }}: # Sign if EnableCodeSign or on *-stable release builds
                signMicrosoft: true
              slices:
                - platform: x64
                  configuration: Release
                - platform: x86
                  configuration: Release
                - platform: ARM64
                  configuration: Release  
                - platform: x64
                  configuration: Debug
                - platform: x86
                  configuration: Debug
                - platform: ARM64
                  configuration: Debug

          - template: .ado/templates/prep-and-pack-nuget.yml@self
            parameters:
              artifactName: Desktop
              publishCommitId: $(publishCommitId)
              npmVersion: $(npmVersion)
              nugetroot: $(System.DefaultWorkingDirectory)\Desktop
              packDesktop: true
              ${{ if or(eq(variables['EnableCodesign'], 'true'), endsWith(variables['Build.SourceBranchName'], '-stable')) }}: # Sign if EnableCodeSign or on *-stable release builds
                signMicrosoft: true
              slices:
                - platform: x64
                  configuration: Release
                - platform: x86
                  configuration: Release
                - platform: ARM64
                  configuration: Release
                - platform: x64
                  configuration: Debug
                - platform: x86
                  configuration: Debug
                - platform: ARM64
                  configuration: Debug

          - template: .ado/templates/prep-and-pack-nuget.yml@self
            parameters:
              artifactName: DesktopFabric
              publishCommitId: $(publishCommitId)
              npmVersion: $(npmVersion)-Fabric
              nugetroot: $(System.DefaultWorkingDirectory)\Desktop
              packDesktop: true
              ${{ if or(eq(variables['EnableCodesign'], 'true'), endsWith(variables['Build.SourceBranchName'], '-stable')) }}: # Sign if EnableCodeSign or on *-stable release builds
                signMicrosoft: true
              slices:
                - platform: x64
                  configuration: Release
                - platform: x86
                  configuration: Release
                # - platform: ARM64
                #   configuration: Release
                - platform: x64
                  configuration: Debug
                - platform: x86
                  configuration: Debug
                # - platform: ARM64
                #   configuration: Debug

          templateContext:
            sdl:
              binskim:
                analyzeTargetGlob: '$(System.DefaultWorkingDirectory)\ReactWindows\**\Microsoft.ReactNative\Microsoft.ReactNative.dll;$(System.DefaultWorkingDirectory)\Desktop\**\React.Windows.Desktop.DLL\react-native-win32.dll'
            outputs:
            - output: pipelineArtifact
              displayName: 'Publish final nuget artifacts'
              targetPath: $(System.DefaultWorkingDirectory)\NugetRootFinal
              artifactName: "ReactWindows-final-nuget"
