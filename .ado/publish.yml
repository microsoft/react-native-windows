name: 0.0.$(Date:yyMM.d)$(Rev:rrr)

parameters:
- name: skipNpmPublish
  displayName: Skip Npm Publish
  type: boolean
  default: false
- name: skipGitPush
  displayName: Skip Git Push
  type: boolean
  default: false
- name: skipStableCodesign
  displayName: Skip Codesigning for Stable Branch
  type: boolean
  default: false
- name: stopOnNoCI
  displayName: Stop if latest commit is ***NO_CI***
  type: boolean
  default: true

variables:
  - template: variables/msbuild.yml
  - template: variables/vs2019.yml
  - group: RNW Secrets
  - name: SkipNpmPublishArgs
    value: ''
  - name: SkipGitPushPublishArgs
    value: ''
  - name: NugetSecurityAnalysisWarningLevel
    value: 'warn'
  - name: FailCGOnAlert
    value: false
  - name: EnableCodesign
    value: false
  - name: AgentPool.Medium.Microsoft 
    value: rnw-pool-4-microsoft
  - name: AgentPool.Large.Microsoft
    value: rnw-pool-8-microsoft

trigger: none
pr: none

jobs:
  - job: RnwNpmPublish
    displayName: React-Native-Windows Npm Build Rev Publish
    pool: $(AgentPool.Medium.Microsoft)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    steps:
      - checkout: self
        clean: true
        submodules: false

      - template: templates/configure-git.yml

      - template: templates/yarn-install.yml

      - script: yarn build
        displayName: yarn build

      - powershell: |
          Write-Error "Stopping because commit message contains ***NO_CI***."
        displayName: Stop pipeline if latest commit message contains ***NO_CI***
        condition: and(${{ parameters.stopOnNoCI }}, contains(variables['Build.SourceVersionMessage'], '***NO_CI***'))

      - script: |
          echo ##vso[task.setvariable variable=SkipNpmPublishArgs]--no-publish
        displayName: Enable No-Publish
        condition: ${{ parameters.skipNpmPublish }}

      - script: |
          echo ##vso[task.setvariable variable=SkipGitPushPublishArgs]--no-push
        displayName: Enable No-Publish
        condition: ${{ parameters.skipGitPush }}

      - script: yarn build
        displayName: yarn build

      - script: npx --no-install beachball publish $(SkipNpmPublishArgs) $(SkipGitPushPublishArgs) --branch origin/$(Build.SourceBranchName) -n $(npmAuthToken) -yes -m "applying package updates ***NO_CI***" --bump-deps  --access public --no-git-tags
        displayName: Beachball Publish (Master Branch)
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

      - script: npx --no-install beachball publish $(SkipNpmPublishArgs) $(SkipGitPushPublishArgs) --branch origin/$(Build.SourceBranchName) -n $(npmAuthToken) -yes -m "applying package updates ***NO_CI***" --bump-deps  --access public
        displayName: Beachball Publish (Stable Branch)
        condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'master'))

      # Beachball reverts to local state after publish, but we want the updates it added
      - script: git pull origin ${{ variables['Build.SourceBranchName'] }}
        displayName: git pull

      - script: npx --ignore-existing @rnw-scripts/create-github-releases --yes --authToken $(githubAuthToken)
        displayName: Create GitHub Releases for New Tags (Stable Branch)
        condition: and(succeeded(), ${{ not(parameters.skipGitPush) }}, ${{ ne(variables['Build.SourceBranchName'], 'master') }} )

      - template: templates/set-version-vars.yml

      - template: templates/publish-version-vars.yml

  - job: RnwNativeBuildDesktop
    displayName: Build Desktop
    dependsOn: RnwNpmPublish
    strategy:
      matrix:
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
        ARM64Debug:
          BuildConfiguration: Debug
          BuildPlatform: ARM64
        ARM64Release:
          BuildConfiguration: Release
          BuildPlatform: ARM64
    pool: $(AgentPool.Large.Microsoft)

    steps:
      - template: templates/apply-published-version-vars.yml

      - template: templates/build-rnw.yml
        parameters:
          project: vnext/ReactWindows-Desktop.sln
          msbuildArguments:
            /p:RNW_PKG_VERSION_STR="$(RNW_PKG_VERSION_STR)"
            /p:RNW_PKG_VERSION_MAJOR="$(RNW_PKG_VERSION_MAJOR)"
            /p:RNW_PKG_VERSION_MINOR="$(RNW_PKG_VERSION_MINOR)"
            /p:RNW_PKG_VERSION_PATCH="$(RNW_PKG_VERSION_PATCH)"

      - template: templates/publish-build-artifacts-for-nuget.yml
        parameters:
          artifactName: ReactWindows
          contents: |
            React.Windows.Desktop\**
            React.Windows.Desktop.DLL\**
            React.Windows.Desktop.Test.DLL\**
      
      - template: templates/component-governance.yml

  - job: RnwNativeBuildUniversal
    displayName: Build Universal
    dependsOn: RnwNpmPublish
    strategy:
      matrix:
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
        ArmDebug:
          BuildConfiguration: Debug
          BuildPlatform: arm
        Arm64Debug:
          BuildConfiguration: Debug
          BuildPlatform: arm64
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
          LayoutHeaders: true
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
        ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: arm
        Arm64Release:
          BuildConfiguration: Release
          BuildPlatform: arm64
    pool: $(AgentPool.Large.Microsoft)

    steps:
      - template: templates/apply-published-version-vars.yml

      - template: templates/build-rnw.yml
        parameters:
          project: vnext/Microsoft.ReactNative.sln

      - template: templates/publish-build-artifacts-for-nuget.yml
        parameters:
          artifactName: ReactWindows
          layoutHeaders: eq('true', variables['LayoutHeaders'])
          contents: |
            Microsoft.ReactNative\**
            Microsoft.ReactNative.Managed\**
            Microsoft.ReactNative.Managed.CodeGen\**
      
      - template: templates/component-governance.yml

    # Disable for now, not sure this works on github projects anyway.
    # - task: PublishSymbols@2
    #   displayName: 'Publish symbols path'
    #   inputs:
    #     SearchPattern: 'vnext/target/**/*.pdb'
    #     SymbolServerType: TeamServices
  - job: RNWNuget
    dependsOn:
      - RnwNpmPublish
      - RnwNativeBuildDesktop
      - RnwNativeBuildUniversal
    displayName: Sign Binaries and Publish NuGet
    pool: $(AgentPool.Medium.Microsoft)

    steps:
      - checkout: none

      - template: templates/apply-published-version-vars.yml

      # The commit tag in the nuspec requires that we use at least nuget 5.8 (because things break with nuget versions before and Vs 16.8 or later)
      - task: NuGetToolInstaller@0
        inputs:
          versionSpec: ">=5.8.0"

      - template: templates/prep-and-pack-nuget.yml
        parameters:
          publishCommitId: $(publishCommitId)
          npmVersion: $(npmVersion)
          ${{ if or(eq(variables['EnableCodesign'], 'true'), and(endsWith(variables['Build.SourceBranchName'], '-stable'), not(parameters.skipStableCodesign))) }}: # Sign on stable release builds
            signMicrosoft: true

      - task: PublishPipelineArtifact@1
        displayName: "Publish final nuget artifacts"
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)\NugetRootFinal
          artifactName: "ReactWindows-final-nuget"
