parameters:
  - name: buildEnvironment
    type: string
    default : PullRequest
    values:
      - PullRequest
      - SecurePullRequest
      - Continuous

  - name: AgentPool
    type: object

  - name: buildMatrix
    type: object
    default:
      - BuildEnvironment: PullRequest
        Matrix:
          - Name: X64Debug
            BuildConfiguration: Debug
            BuildPlatform: x64
            UseFabric: false
          - Name: X64Release
            BuildConfiguration: Release
            BuildPlatform: x64
            UseFabric: false
          - Name: X86Debug
            BuildConfiguration: Debug
            BuildPlatform: x86
            UseFabric: false
          - Name: ARM64ECDebug
            BuildConfiguration: Debug
            BuildPlatform: ARM64EC
          - Name: ARM64ECRelease
            BuildConfiguration: Release
            BuildPlatform: ARM64EC
          - Name: X64DebugFabric
            BuildConfiguration: Debug
            BuildPlatform: x64
            UseFabric: true
      - BuildEnvironment: SecurePullRequest
        Matrix:
          - Name: X64DebugFabric
            BuildConfiguration: Debug
            BuildPlatform: x64
            UseFabric: true
      - BuildEnvironment: Continuous
        Matrix:
          - Name: X64Debug
            BuildConfiguration: Debug
            BuildPlatform: x64
          - Name: X64Release
            BuildConfiguration: Release
            BuildPlatform: x64
          - Name: X86Debug
            BuildConfiguration: Debug
            BuildPlatform: x86
          - Name: X86Release
            BuildConfiguration: Release
            BuildPlatform: x86
          - Name: ARM64ECDebug
            BuildConfiguration: Debug
            BuildPlatform: ARM64EC
          - Name: ARM64ECRelease
            BuildConfiguration: Release
            BuildPlatform: ARM64EC
          - Name: X64DebugFabric
            BuildConfiguration: Debug
            BuildPlatform: x64
            UseFabric: true
          - Name: X86ReleaseFabric # Specifically built so binskim / tests get run on fabric
            BuildConfiguration: Release
            BuildPlatform: x86
            UseFabric: true

jobs:
  - ${{ each config in parameters.buildMatrix }}:
    - ${{ if eq(config.BuildEnvironment, parameters.buildEnvironment) }}:
      - ${{ each matrix in config.Matrix }}:
        - job: Desktop${{ matrix.Name }}
          displayName: Desktop ${{ matrix.Name }}

          variables:
            - template: ../variables/windows.yml

            # Enable if any issues RNTesterIntegrationTests::* become unstable.
            - name: Desktop.IntegrationTests.SkipRNTester
              value: false

            #5059 - Disable failing or intermittent tests (IntegrationTestHarness,WebSocket,Logging).
            #10732 -  WebSocketIntegrationTest::SendReceiveSsl fails on Windows Server 2022.
            #12714 -  Disable for first deployment of test website.
            #         RNTesterIntegrationTests::WebSocket
            #         RNTesterIntegrationTests::WebSocketBlob
            ##13897 - Reneable RNTesterIntegrationTests
            #         RNTesterIntegrationTests::Dummy
            #         RNTesterIntegrationTests::Fetch
            #         RNTesterIntegrationTests::XHRSample
            #         RNTesterIntegrationTests::Blob
            #         RNTesterIntegrationTests::Logging
            - name: Desktop.IntegrationTests.Filter
              value: >
                (FullyQualifiedName!=RNTesterIntegrationTests::IntegrationTestHarness)&
                (FullyQualifiedName!=RNTesterIntegrationTests::WebSocket)&
                (FullyQualifiedName!=RNTesterIntegrationTests::WebSocketBlob)&
                (FullyQualifiedName!=WebSocketIntegrationTest::SendReceiveSsl)&
                (FullyQualifiedName!=Microsoft::React::Test::HttpOriginPolicyIntegrationTest)&
                (FullyQualifiedName!=RNTesterIntegrationTests::Dummy)&
                (FullyQualifiedName!=RNTesterIntegrationTests::Fetch)&
                (FullyQualifiedName!=RNTesterIntegrationTests::XHRSample)&
                (FullyQualifiedName!=RNTesterIntegrationTests::Blob)&
                (FullyQualifiedName!=RNTesterIntegrationTests::Logging)
            #6799 -
            #       HostFunctionTest              - Crashes under JSI/V8
            #       HostObjectProtoTest           - Crashes under JSI/V8
            #       PreparedJavaScriptSourceTest  - Asserts/Fails under JSI/ChakraCore
            - name: Desktop.UnitTests.Filter
              value: >
                (FullyQualifiedName!~HostFunctionTest)&
                (FullyQualifiedName!~HostObjectProtoTest)&
                (FullyQualifiedName!~PreparedJavaScriptSourceTest)

          pool: ${{ parameters.AgentPool.Medium }}
          timeoutInMinutes: 80 # how long to run the job before automatically cancelling - Issue 13442
          cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

          steps:
            # Set up IIS tests {
            - pwsh: |
                Install-WindowsFeature -Name Web-Server, Web-Scripting-Tools
              displayName: Install IIS

            - pwsh: |
                Invoke-WebRequest `
                  -Uri 'https://download.visualstudio.microsoft.com/download/pr/20598243-c38f-4538-b2aa-af33bc232f80/ea9b2ca232f59a6fdc84b7a31da88464/dotnet-hosting-8.0.3-win.exe' `
                  -OutFile dotnet-hosting-8.0.3-win.exe

                Write-Host 'Installing .NET hosting bundle'
                Start-Process -Wait -FilePath .\dotnet-hosting-8.0.3-win.exe -ArgumentList '/INSTALL', '/QUIET', '/NORESTART'
                Write-Host 'Installed .NET hosting bundle'

                Invoke-WebRequest `
                  -Uri 'https://download.visualstudio.microsoft.com/download/pr/f2ec926e-0d98-4a8b-8c70-722ccc2ca0e5/b59941b0c60f16421679baafdb7e9338/dotnet-sdk-7.0.407-win-x64.exe' `
                  -OutFile dotnet-sdk-7.0.407-win-x64.exe

                Write-Host 'Installing .NET 7 SDK'
                Start-Process -Wait -FilePath .\dotnet-sdk-7.0.407-win-x64.exe -ArgumentList '/INSTALL', '/QUIET', '/NORESTART'
                Write-Host 'Installed .NET 7 SDK'
              displayName: Install the .NET Core Hosting Bundle

            # } Set up IIS tests

            - template: ../templates/checkout-shallow.yml

            - template: ../templates/prepare-js-env.yml

            - template: ../templates/prepare-build-env.yml
              parameters:
                platform: ${{ matrix.BuildPlatform }}
                configuration: ${{ matrix.BuildConfiguration }}
                buildEnvironment: ${{ config.BuildEnvironment }}

            - template: ../templates/apply-published-version-vars.yml

            - ${{ if eq(variables['Desktop.IntegrationTests.SkipRNTester'], true) }}:
              - powershell: |
                  $newValue = '(FullyQualifiedName!~RNTesterIntegrationTests::)&' + "$(Desktop.IntegrationTests.Filter)"
                  Write-Host "##vso[task.setvariable variable=Desktop.IntegrationTests.Filter]$newValue"
                displayName: Update Desktop.IntegrationTests.Filter to exclude RNTester integration tests

            - ${{ if eq(matrix.UseFabric, true) }}:
              - template: ../templates/enable-fabric-experimental-feature.yml

            - template: ../templates/msbuild-sln.yml
              parameters:
                solutionDir: vnext
                solutionName: ReactWindows-Desktop.sln
                buildPlatform: ${{ matrix.BuildPlatform }}
                buildConfiguration: ${{ matrix.BuildConfiguration }}

            - ${{ if and(eq(matrix.BuildConfiguration, 'Debug'), eq(matrix.BuildPlatform, 'x64')) }}:
              - script: yarn bundle
                displayName: Build react-native-win32 RNTester bundle
                workingDirectory: packages/@office-iss/react-native-win32

            - ${{ if eq(config.BuildEnvironment, 'Continuous') }}:
              - template: ../templates/component-governance.yml

            - template: ../templates/discover-google-test-adapter.yml

            - ${{ if ne(matrix.BuildPlatform, 'ARM64EC') }}:
              - task: VSTest@2
                displayName: Run Desktop Unit Tests
                timeoutInMinutes: 5 # Set smaller timeout , due to hangs
                inputs:
                  testSelector: testAssemblies
                  testAssemblyVer2: |
                    React.Windows.Desktop.UnitTests/React.Windows.Desktop.UnitTests.dll
                  # Bug #8000: Tracks fixing the tests
                  # ReactCommon.UnitTests/ReactCommon.UnitTests.exe
                  pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
                  searchFolder: $(Build.SourcesDirectory)/vnext/target/${{ matrix.BuildPlatform }}/${{ matrix.BuildConfiguration }}
                  testFiltercriteria: $(Desktop.UnitTests.Filter)
                  runTestsInIsolation: true
                  platform: ${{ matrix.BuildPlatform }}
                  configuration: ${{ matrix.BuildConfiguration }}
                  publishRunAttachments: true
                  collectDumpOn: onAbortOnly
                  vsTestVersion: latest
                  failOnMinTestsNotRun: true

              # Suspected debug assert in TestRunner hanging tests randomly. Run only on Release for now.
            - ${{ if and(eq(matrix.BuildConfiguration, 'Release'), ne(variables['Desktop.IntegrationTests.SkipRNTester'], true), ne(matrix.BuildPlatform, 'ARM64EC')) }}:
              - task: PowerShell@2
                displayName: Set up test servers
                inputs:
                  targetType: filePath # filePath | inline
                  filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tfs\Start-TestServers.ps1
                  arguments: -SourcesDirectory $(Build.SourcesDirectory)\vnext -Preload -SleepSeconds 120

              - task: DotNetCoreCLI@2
                displayName: Publish Test Website
                inputs:
                  command: publish
                  publishWebProjects: false
                  zipAfterPublish: false
                  projects: $(Build.SourcesDirectory)\vnext\TestWebsite\Microsoft.ReactNative.Test.Website.csproj
                  arguments: --configuration ${{ matrix.BuildConfiguration }}

              - pwsh: |
                  # Create and make available to IIS
                  $cert = New-SelfSignedCertificate `
                    -Type SSLServerAuthentication `
                    -KeyExportPolicy Exportable `
                    -Subject 'CN=localhost' `
                    -NotAfter ([DateTime]::Now).AddHours(2) `
                    -CertStoreLocation Cert:\LocalMachine\My\

                  $certPath = "${env:TEMP}\localhost.pfx"
                  $certPass = -join ('a'..'z' | Get-Random -Count 32) | ConvertTo-SecureString -AsPlainText -Force
                  $certHash = $cert.Thumbprint
                  Write-Host "##vso[task.setvariable variable=TestWebsiteCertificateThumbprint]$certHash"

                  # Export PFX
                  $cert | Export-PfxCertificate -FilePath $certPath -Password $certPass

                  # Trust globally
                  Import-PfxCertificate `
                    -Exportable `
                    -FilePath $certPath `
                    -Password $certPass `
                    -CertStoreLocation Cert:\LocalMachine\Root\
                displayName: Install SSL Certificate

              - task: IISWebAppManagementOnMachineGroup@0
                displayName: Create Test Website
                inputs:
                  EnableIIS: false
                  IISDeploymentType: IISWebsite
                  ActionIISWebsite: CreateOrUpdateWebsite
                  SSLCertThumbPrint: $(TestWebsiteCertificateThumbprint)
                  # IIS Website
                  WebsiteName: RNW Test Website
                  # Hard-coding x64 for publish path.
                  # Our MSBuild customizations cause dotnet commans to assume the default PlatformTarget
                  WebsitePhysicalPath: $(Build.SourcesDirectory)\vnext\target\x64\${{ matrix.BuildConfiguration }}\Microsoft.ReactNative.Test.Website\Publish
                  WebsitePhysicalPathAuth: WebsiteUserPassThrough
                  CreateOrUpdateAppPoolForWebsite: false
                  ConfigureAuthenticationForWebsite: false
                  # IIS Application pool
                  AppPoolNameForWebsite: DefaultAppPool
                  # IIS Bindings
                  # See https://stackoverflow.com/questions/60089756
                  AddBinding: true
                  Bindings: |
                    {
                      bindings: [
                        {
                          "protocol": "http",
                          "ipAddress": "*",
                          "port": "5555",
                          "sslThumbprint": "",
                          "sniFlag": false
                        },
                        {
                          "protocol": "https",
                          "ipAddress": "*",
                          "port": "5543",
                          "sslThumbprint": "$(TestWebsiteCertificateThumbprint)",
                          "sniFlag": false
                        }
                      ]
                    }

              - task: PowerShell@2
                displayName: Ensure servers readiness
                inputs:
                  targetType: 'inline'
                  script: |
                    # Test website
                    Invoke-WebRequest -Uri 'http://localhost:5555'
                    Invoke-WebRequest -Uri 'https://localhost:5543'

                    # Bundler
                    Invoke-WebRequest -UseBasicParsing -Uri "http://localhost:8081/IntegrationTests/IntegrationTestsApp.bundle?platform=windows&dev=true"

              - task: VSTest@2
                displayName: Run Desktop Integration Tests
                inputs:
                  testSelector: testAssemblies
                  testAssemblyVer2: React.Windows.Desktop.IntegrationTests\React.Windows.Desktop.IntegrationTests.dll
                  searchFolder: $(Build.SourcesDirectory)\vnext\target\${{ matrix.BuildPlatform }}\${{ matrix.BuildConfiguration }}
                  testFiltercriteria: $(Desktop.IntegrationTests.Filter)
                  runTestsInIsolation: true
                  platform: ${{ matrix.BuildPlatform }}
                  configuration: ${{ matrix.BuildConfiguration }}
                  publishRunAttachments: true
                  collectDumpOn: onAbortOnly
                  vsTestVersion: latest
                  failOnMinTestsNotRun: true
                  otherConsoleOptions: '/blame -- RunConfiguration.TestSessionTimeout=300000'

              - template: ../templates/stop-packagers.yml

            - task: BinSkim@4
              displayName: Run Binskim Analysis
              condition: eq('${{ matrix.BuildConfiguration }}', 'Release')
              inputs:
                  InputType: 'Basic'
                  Function: 'analyze'
                  TargetPattern: 'guardianGlob'
                  AnalyzeTargetGlob: '$(Build.SourcesDirectory)\vnext\target\${{ matrix.BuildPlatform }}\${{ matrix.BuildConfiguration }}\React.Windows.Desktop.DLL\react-native-win32.dll'
                  AnalyzeVerbose: true
                  toolVersion: 'Latest'
              continueOnError: true

            - template: ../templates/publish-build-artifacts.yml
              parameters:
                ${{ if eq(matrix.UseFabric, true) }}:
                  artifactName: DesktopFabric
                ${{ else }}:
                  artifactName: Desktop
                buildPlatform: ${{ matrix.BuildPlatform }}
                buildConfiguration: ${{ matrix.BuildConfiguration }}
                contents: |
                  React.Windows.Desktop\**
                  React.Windows.Desktop.DLL\**
                  React.Windows.Desktop.Test.DLL\**
