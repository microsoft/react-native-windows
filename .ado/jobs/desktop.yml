parameters:
  - name: buildEnvironment
    type: string
    default : PullRequest
    values:
      - PullRequest
      - SecurePullRequest
      - Continuous

  - name: AgentPool
    type: object

  - name: buildMatrix
    type: object
    default:
      - BuildEnvironment: PullRequest
        Matrix:
          - Name: X64Debug
            BuildConfiguration: Debug
            BuildPlatform: x64
            UseFabric: false
          - Name: X64DebugFabric
            BuildConfiguration: Debug
            BuildPlatform: x64
            UseFabric: true
          - Name: X64Release
            BuildConfiguration: Release
            BuildPlatform: x64
            UseFabric: false
          - Name: X86Debug
            BuildConfiguration: Debug
            BuildPlatform: x86
            UseFabric: false
      - BuildEnvironment: SecurePullRequest
        Matrix:
          - Name: X64DebugFabric
            BuildConfiguration: Debug
            BuildPlatform: x64
            UseFabric: true
      - BuildEnvironment: Continuous
        Matrix:
          - Name: X64Debug
            BuildConfiguration: Debug
            BuildPlatform: x64
          - Name: X64Release
            BuildConfiguration: Release
            BuildPlatform: x64
          - Name: X86Debug
            BuildConfiguration: Debug
            BuildPlatform: x86
          - Name: Arm64Debug
            BuildConfiguration: Debug
            BuildPlatform: ARM64
          - Name: Arm64Release
            BuildConfiguration: Release
            BuildPlatform: ARM64
          - Name: X86Release
            BuildConfiguration: Release
            BuildPlatform: x86
          - X86ReleaseFabric:
            BuildConfiguration: Release
            BuildPlatform: x86
            UseFabric: true

jobs:
  - ${{ each config in parameters.buildMatrix }}:
    - ${{ if eq(config.BuildEnvironment, parameters.buildEnvironment) }}:
      - ${{ each matrix in config.Matrix }}:
        - job: Desktop${{ matrix.Name }}
          displayName: Desktop ${{ matrix.Name }}

          variables:
            - template: ../variables/windows.yml

            # Enable if any issues RNTesterIntegrationTests::* become unstable.
            - name: Desktop.IntegrationTests.SkipRNTester
              value: false

            #5059 - Disable failing or intermittent tests (IntegrationTestHarness,WebSocket,Logging).
            #10732 -  WebSocketIntegrationTest::SendReceiveSsl fails on Windows Server 2022.
            - name: Desktop.IntegrationTests.Filter
              value: >
                (FullyQualifiedName!=RNTesterIntegrationTests::Blob)&
                (FullyQualifiedName!=RNTesterIntegrationTests::IntegrationTestHarness)&
                (FullyQualifiedName!=WebSocketResourcePerformanceTest::ProcessThreadsPerResource)&
                (FullyQualifiedName!=WebSocketIntegrationTest::SendReceiveSsl)&
                (FullyQualifiedName!=Microsoft::React::Test::HttpOriginPolicyIntegrationTest)
            #6799 -
            #       HostFunctionTest              - Crashes under JSI/V8
            #       HostObjectProtoTest           - Crashes under JSI/V8
            #       PreparedJavaScriptSourceTest  - Asserts/Fails under JSI/ChakraCore
            - name: Desktop.UnitTests.Filter
              value: >
                (FullyQualifiedName!~HostFunctionTest)&
                (FullyQualifiedName!~HostObjectProtoTest)&
                (FullyQualifiedName!~PreparedJavaScriptSourceTest)

          pool: ${{ parameters.AgentPool.Medium }}
          timeoutInMinutes: 60 # how long to run the job before automatically cancelling
          cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

          steps:
            - template: ../templates/checkout-shallow.yml

            # - template: ../templates/prepare-js-env.yml

            # - template: ../templates/prepare-build-env.yml
            #   parameters:
            #     platform: ${{ matrix.BuildPlatform }}
            #     configuration: ${{ matrix.BuildConfiguration }}
            #     buildEnvironment: ${{ config.BuildEnvironment }}

            # - template: ../templates/apply-published-version-vars.yml

            - ${{ if eq(variables['Desktop.IntegrationTests.SkipRNTester'], true) }}:
              - powershell: |
                  $newValue = '(FullyQualifiedName!~RNTesterIntegrationTests::)&' + "$(Desktop.IntegrationTests.Filter)"
                  Write-Host "##vso[task.setvariable variable=Desktop.IntegrationTests.Filter]$newValue"
                displayName: Update Desktop.IntegrationTests.Filter to exclude RNTester integration tests

            - ${{ if eq(matrix.UseFabric, true) }}:
              - template: ../templates/enable-fabric-experimental-feature.yml

            - task: DotNetCoreCLI@2
              inputs:
                command: build
                #publishWebProjects: true # boolean. Optional. Use when command = publish. Publish web projects. Default: true.
                #projects: # string. Optional. Use when command = build || command = restore || command = run || command = test || command = custom || publishWebProjects = false. Path to project(s) or solution(s).
                #custom: # string. Required when command = custom. Custom command.
                #arguments: # string. Optional. Use when command = build || command = publish || command = run || command = test || command = custom. Arguments.
                #restoreArguments: # string. Optional. Use when command = restore. Arguments.
                #publishTestResults: true # boolean. Optional. Use when command = test. Publish test results and code coverage. Default: true.
                #testRunTitle: # string. Optional. Use when command = test. Test run title.
                #zipAfterPublish: true # boolean. Optional. Use when command = publish. Zip published projects. Default: true.
                #modifyOutputPath: true # boolean. Optional. Use when command = publish. Add project's folder name to publish path. Default: true.
                #packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg' # string. Alias: searchPatternPush. Required when command = push. Path to NuGet package(s) to publish. Default: $(Build.ArtifactStagingDirectory)/*.nupkg.
                #nuGetFeedType: 'internal' # 'internal' | 'external'. Required when command = push. Target feed location. Default: internal.
                #publishVstsFeed: # string. Alias: feedPublish. Required when command = push && nuGetFeedType = internal. Target feed.
                #publishFeedCredentials: # string. Alias: externalEndpoint. Required when command = push && nuGetFeedType = external. NuGet server.
                #packagesToPack: '**/*.csproj' # string. Alias: searchPatternPack. Required when command = pack. Path to csproj or nuspec file(s) to pack. Default: **/*.csproj.
                configuration: Release # '$(BuildConfiguration)' # string. Alias: configurationToPack. Optional. Use when command = pack. Configuration to Package. Default: $(BuildConfiguration).
                #packDirectory: '$(Build.ArtifactStagingDirectory)' # string. Alias: outputDir. Optional. Use when command = pack. Package Folder. Default: $(Build.ArtifactStagingDirectory).
                #nobuild: false # boolean. Optional. Use when command = pack. Do not build. Default: false.
                #includesymbols: false # boolean. Optional. Use when command = pack. Include Symbols. Default: false.
                #includesource: false # boolean. Optional. Use when command = pack. Include Source. Default: false.
              # Feeds and authentication
                #feedsToUse: 'select' # 'select' | 'config'. Alias: selectOrConfig. Required when command = restore. Feeds to use. Default: select.
                #vstsFeed: # string. Alias: feedRestore. Optional. Use when selectOrConfig = select && command = restore. Use packages from this Azure Artifacts feed.
                #includeNuGetOrg: true # boolean. Optional. Use when selectOrConfig = select && command = restore. Use packages from NuGet.org. Default: true.
                #nugetConfigPath: # string. Optional. Use when selectOrConfig = config && command = restore. Path to NuGet.config.
                #externalFeedCredentials: # string. Alias: externalEndpoints. Optional. Use when selectOrConfig = config && command = restore. Credentials for feeds outside this organization/collection.
              # Advanced
                #noCache: false # boolean. Optional. Use when command = restore. Disable local cache. Default: false.
                #restoreDirectory: # string. Alias: packagesDirectory. Optional. Use when command = restore. Destination directory.
                #verbosityRestore: 'Detailed' # '-' | 'Quiet' | 'Minimal' | 'Normal' | 'Detailed' | 'Diagnostic'. Optional. Use when command = restore. Verbosity. Default: Detailed.
              # Advanced
                #publishPackageMetadata: true # boolean. Optional. Use when command = push && nuGetFeedType = internal && command = push. Publish pipeline metadata. Default: true.
              # Pack options
                #versioningScheme: 'off' # 'off' | 'byPrereleaseNumber' | 'byEnvVar' | 'byBuildNumber'. Required when command = pack. Automatic package versioning. Default: off.
                #versionEnvVar: # string. Required when versioningScheme = byEnvVar && command = pack. Environment variable.
                #majorVersion: '1' # string. Alias: requestedMajorVersion. Required when versioningScheme = byPrereleaseNumber && command = pack. Major. Default: 1.
                #minorVersion: '0' # string. Alias: requestedMinorVersion. Required when versioningScheme = byPrereleaseNumber && command = pack. Minor. Default: 0.
                #patchVersion: '0' # string. Alias: requestedPatchVersion. Required when versioningScheme = byPrereleaseNumber && command = pack. Patch. Default: 0.
              # Advanced
                #buildProperties: # string. Optional. Use when command = pack. Additional build properties.
                #verbosityPack: 'Detailed' # '-' | 'Quiet' | 'Minimal' | 'Normal' | 'Detailed' | 'Diagnostic'. Optional. Use when command = pack. Verbosity. Default: Detailed.
              # Advanced
                #workingDirectory: # string. Optional. Use when command != restore && command != push && command != pack && command != pack && command != push && command != restore. Working directory.

            # - template: ../templates/msbuild-sln.yml
            #   parameters:
            #     solutionDir: vnext
            #     solutionName: ReactWindows-Desktop.sln
            #     buildPlatform: ${{ matrix.BuildPlatform }}
            #     buildConfiguration: ${{ matrix.BuildConfiguration }}

            # - ${{ if and(eq(matrix.BuildConfiguration, 'Debug'), eq(matrix.BuildPlatform, 'x64')) }}:
            #   - script: yarn bundle
            #     displayName: Build react-native-win32 RNTester bundle
            #     workingDirectory: packages/@office-iss/react-native-win32

            # - ${{ if eq(config.BuildEnvironment, 'Continuous') }}:
            #   - template: ../templates/component-governance.yml

            # - template: ../templates/discover-google-test-adapter.yml

            # - ${{ if ne(matrix.BuildPlatform, 'ARM64') }}:
            #   - task: VSTest@2
            #     displayName: Run Desktop Unit Tests
            #     timeoutInMinutes: 5 # Set smaller timeout , due to hangs
            #     inputs:
            #       testSelector: testAssemblies
            #       testAssemblyVer2: |
            #         React.Windows.Desktop.UnitTests/React.Windows.Desktop.UnitTests.dll
            #       # Bug #8000: Tracks fixing the tests
            #       # ReactCommon.UnitTests/ReactCommon.UnitTests.exe
            #       pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
            #       searchFolder: $(Build.SourcesDirectory)/vnext/target/${{ matrix.BuildPlatform }}/${{ matrix.BuildConfiguration }}
            #       testFiltercriteria: $(Desktop.UnitTests.Filter)
            #       runTestsInIsolation: true
            #       platform: ${{ matrix.BuildPlatform }}
            #       configuration: ${{ matrix.BuildConfiguration }}
            #       publishRunAttachments: true
            #       collectDumpOn: onAbortOnly
            #       vsTestVersion: latest
            #       failOnMinTestsNotRun: true

            #   # Suspected debug assert in TestRunner hanging tests randomly. Run only on Release for now.
            # - ${{ if and(eq(matrix.BuildConfiguration, 'Release'), ne(variables['Desktop.IntegrationTests.SkipRNTester'], true), ne(matrix.BuildPlatform, 'ARM64')) }}:
            #   - task: PowerShell@2
            #     displayName: Set up test servers
            #     inputs:
            #       targetType: filePath # filePath | inline
            #       filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tfs\Start-TestServers.ps1
            #       arguments: -SourcesDirectory $(Build.SourcesDirectory)\vnext -Preload -SleepSeconds 120

            #   - task: PowerShell@2
            #     displayName: Check the metro bundle server
            #     inputs:
            #       targetType: 'inline'
            #       script: Invoke-WebRequest -UseBasicParsing -Uri "http://localhost:8081/IntegrationTests/IntegrationTestsApp.bundle?platform=windows&dev=true"

            #   - task: VSTest@2
            #     displayName: Run Desktop Integration Tests
            #     inputs:
            #       testSelector: testAssemblies
            #       testAssemblyVer2: React.Windows.Desktop.IntegrationTests\React.Windows.Desktop.IntegrationTests.dll
            #       searchFolder: $(Build.SourcesDirectory)\vnext\target\${{ matrix.BuildPlatform }}\${{ matrix.BuildConfiguration }}
            #       testFiltercriteria: $(Desktop.IntegrationTests.Filter)
            #       runTestsInIsolation: true
            #       platform: ${{ matrix.BuildPlatform }}
            #       configuration: ${{ matrix.BuildConfiguration }}
            #       publishRunAttachments: true
            #       collectDumpOn: onAbortOnly
            #       vsTestVersion: latest
            #       failOnMinTestsNotRun: true
            #       otherConsoleOptions: '/blame -- RunConfiguration.TestSessionTimeout=300000'

            #   - template: ../templates/stop-packagers.yml

            # - task: BinSkim@4
            #   displayName: Run Binskim Analysis
            #   condition: eq('${{ matrix.BuildConfiguration }}', 'Release')
            #   inputs:
            #       InputType: 'Basic'
            #       Function: 'analyze'
            #       TargetPattern: 'guardianGlob'
            #       AnalyzeTargetGlob: '$(Build.SourcesDirectory)\vnext\target\${{ matrix.BuildPlatform }}\${{ matrix.BuildConfiguration }}\React.Windows.Desktop.DLL\react-native-win32.dll'
            #       AnalyzeVerbose: true
            #       toolVersion: 'Latest'
            #   continueOnError: true

            # - template: ../templates/publish-build-artifacts.yml
            #   parameters:
            #     ${{ if eq(matrix.UseFabric, true) }}:
            #       artifactName: DesktopFabric
            #     ${{ else }}:
            #       artifactName: Desktop
            #     buildPlatform: ${{ matrix.BuildPlatform }}
            #     buildConfiguration: ${{ matrix.BuildConfiguration }}
            #     contents: |
            #       React.Windows.Desktop\**
            #       React.Windows.Desktop.DLL\**
            #       React.Windows.Desktop.Test.DLL\**
