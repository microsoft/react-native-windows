# Job to run Attack Surface Analyzer (ASA) for SDL compliance
# Validates that installers or high-privilege programs do not weaken OS security
parameters:
  - name: buildEnvironment
    type: string
    default: PullRequest
    values:
      - PullRequest
      - SecurePullRequest
      - Continuous
  - name: AgentPool
    type: object
  - name: complianceWarnOnly
    displayName: Convert compliance errors to warnings
    type: boolean
    default: true

jobs:
  # Only run ASA for SecurePullRequest builds
  - ${{if eq(parameters.buildEnvironment, 'SecurePullRequest')}}:
    - job: AttackSurfaceAnalyzer
      displayName: Attack Surface Analyzer (ASA) üõ°Ô∏è
      pool: ${{ parameters.AgentPool.Medium }}
      timeoutInMinutes: 60
      cancelTimeoutInMinutes: 5

      variables:
        - template: ../variables/windows.yml

      steps:
        - template: ../templates/checkout-shallow.yml

        - template: ../templates/prepare-js-env.yml

        - template: ../templates/set-version-vars.yml
          parameters:
            buildEnvironment: ${{ parameters.buildEnvironment }}

        - template: ../templates/prepare-build-env.yml
          parameters:
            platform: x64
            configuration: Release
            buildEnvironment: ${{ parameters.buildEnvironment }}

        # Authenticate to NuGet feeds
        - task: NuGetAuthenticate@1
          displayName: 'üõ°Ô∏è Authenticate NuGet'

        # Install Attack Surface Analyzer CLI tool
        - task: PowerShell@2
          displayName: 'üõ°Ô∏è Install Attack Surface Analyzer'
          inputs:
            errorActionPreference: 'continue'
            targetType: inline
            script: |
              Write-Host "Installing Attack Surface Analyzer (ASA) CLI tool..."
              # Install from public NuGet.org feed
              dotnet tool install --global Microsoft.CST.AttackSurfaceAnalyzer.CLI --add-source https://api.nuget.org/v3/index.json
              
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to install ASA tool"
                exit 1
              }

        # Take "before" snapshot of the system
        - task: PowerShell@2
          displayName: 'üõ°Ô∏è ASA - Collect Before Snapshot'
          inputs:
            targetType: inline
            script: |
              # Refresh environment PATH to include .NET global tools
              $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
              
              Write-Host "Taking 'before' snapshot of system state..."
              asa collect -r before --verbose
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to collect 'before' snapshot"
                exit 1
              }
              Write-Host "‚úÖ Before snapshot collected successfully"

        # Build the React Native Windows solution
        # This simulates the "installation" that ASA will analyze
        - template: ../templates/msbuild-sln.yml
          parameters:
            solutionDir: vnext
            solutionName: Microsoft.ReactNative.sln
            buildPlatform: x64
            buildConfiguration: Release

        # Optional: Build NuGet packages if needed
        # This step simulates package creation which could modify system state
        - task: PowerShell@2
          displayName: 'üõ°Ô∏è ASA - Simulate Package Installation'
          inputs:
            targetType: inline
            script: |
              Write-Host "Simulating package installation for ASA analysis..."
              Write-Host "Build artifacts are in place for analysis"
              # Note: Actual NuGet package installation would go here if needed
              # For now, we're analyzing the build process itself

        # Take "after" snapshot of the system
        - task: PowerShell@2
          displayName: 'üõ°Ô∏è ASA - Collect After Snapshot'
          inputs:
            targetType: inline
            script: |
              # Refresh environment PATH to include .NET global tools
              $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
              
              Write-Host "Taking 'after' snapshot of system state..."
              asa collect -r after --verbose
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to collect 'after' snapshot"
                exit 1
              }
              Write-Host "‚úÖ After snapshot collected successfully"

        # Export comparison results (ASA 2.3 syntax)
        - task: PowerShell@2
          displayName: 'üõ°Ô∏è ASA - Export Comparison Results'
          inputs:
            targetType: inline
            script: |
              # Refresh environment PATH to include .NET global tools
              $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

              Write-Host "Comparing before and after snapshots for ASA 2.3..."

              # Create output directory for results
              $resultsDir = "$(Build.ArtifactStagingDirectory)\ASA_Results"
              New-Item -ItemType Directory -Force -Path $resultsDir | Out-Null

              # Default ASA database filenames
              $beforeDb = "asa_before.sqlite"
              $afterDb = "asa_after.sqlite"

              # Rename default output databases from collect steps
              if (Test-Path "asa.sqlite") {
                Rename-Item -Path "asa.sqlite" -NewName $beforeDb -Force
              }

              # Take after snapshot again to ensure it's saved separately
              asa collect --databasefilename $afterDb --verbose
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to collect 'after' snapshot"
                exit 1
              }

              Write-Host "Generating comparison results (JSON and HTML)..."

              # Run the comparison and export
              asa export-collect $beforeDb $afterDb "$resultsDir\asa-comparison.json" --verbose
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to export comparison results (JSON)"
                exit 1
              }

              asa export-collect $beforeDb $afterDb "$resultsDir\asa-comparison.html" --verbose
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to export comparison results (HTML)"
                exit 1
              }

              Write-Host "‚úÖ Comparison results exported successfully"
              Write-Host "Results location: $resultsDir"

        # Analyze results and check for security issues
        - task: PowerShell@2
          displayName: 'üõ°Ô∏è ASA - Analyze Results'
          inputs:
            targetType: inline
            script: |
              Write-Host "Analyzing ASA results for security regressions..."
              
              $resultsFile = "$(Build.ArtifactStagingDirectory)\ASA_Results\asa-comparison.json"
              
              if (-not (Test-Path $resultsFile)) {
                Write-Error "Results file not found: $resultsFile"
                exit 1
              }
              
              # Load and analyze the results
              $results = Get-Content $resultsFile | ConvertFrom-Json
              
              Write-Host "üìä ASA Analysis Summary:"
              Write-Host "========================"
              
              # Count changes by category
              $changeCount = 0
              if ($results) {
                if ($results.PSObject.Properties['Results']) {
                  $changeCount = $results.Results.Count
                }
              }
              
              Write-Host "Total changes detected: $changeCount"
              
              # For SDL compliance, we should review any changes
              # Particularly focus on:
              # - Registry permission changes
              # - File permission changes
              # - Service installations
              # - Firewall rule changes
              # - Certificate store modifications
              
              if ($changeCount -gt 0) {
                Write-Host "‚ö†Ô∏è Changes detected during build process"
                Write-Host "Review the exported results for security implications"
                Write-Host "Results available in build artifacts: ASA_Results"
              } else {
                Write-Host "‚úÖ No significant system changes detected"
              }
              
              # For now, we'll treat this as informational
              # In production, you might want to fail on certain types of changes
              Write-Host "ASA analysis completed"
          continueOnError: ${{ parameters.complianceWarnOnly }}

        # Publish ASA results as build artifact
        - task: PublishBuildArtifacts@1
          displayName: 'üõ°Ô∏è Publish ASA Results'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)\ASA_Results'
            ArtifactName: 'ASA_Results'
            publishLocation: 'Container'
          condition: always()

        # Generate summary for PR
        - task: PowerShell@2
          displayName: 'üõ°Ô∏è ASA - Generate PR Summary'
          inputs:
            targetType: inline
            script: |
              Write-Host "Generating ASA summary for PR..."
              
              $resultsFile = "$(Build.ArtifactStagingDirectory)\ASA_Results\asa-comparison.json"
              
              if (Test-Path $resultsFile) {
                Write-Host "##vso[task.uploadsummary]$(Build.ArtifactStagingDirectory)\ASA_Results\asa-comparison.html"
                Write-Host "‚úÖ ASA summary will be available in PR"
              }
          condition: always()
