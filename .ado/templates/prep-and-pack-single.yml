parameters:
  - name: packageId
    type: string
  - name: packageVersion
    type: string
  - name: slices
    type: object
    default: []
  - name: buildProperties
    type: string
    default: ''
  - name: codesignBinaries
    type: boolean
    default: false
  - name: codesignNuget
    type: boolean
    default: false

steps:

  # Strip down the binaries from NuGet because we may not have built all the flavours.
  - ${{ if gt(length(parameters.slices), 0) }}:
    - powershell: |
        $slices = ConvertFrom-Json '${{ convertToJson(parameters.slices) }}'
        $slicesArg = $slices | % {$_.platform + "." + $_.configuration}

        .\StripAdditionalPlatformsFromNuspec.ps1 -nuspec ${{parameters.packageId}}.nuspec -outfile ${{parameters.packageId}}.nuspec -slices $slicesArg -debug
      displayName: '${{ parameters.packageId }} - Strip slices from nuspec'
      workingDirectory: $(System.DefaultWorkingDirectory)/ReactWindows

  - ${{ if eq(parameters.codesignBinaries, true) }}:
    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: '${{ parameters.packageId }} CodeSign Binaries'
      inputs:
        ConnectedServiceName: ReactNativeSigning
        FolderPath: $(System.DefaultWorkingDirectory)/ReactWindows
        # Recursively finds files matching these patterns:
        Pattern: |
          **/${{ parameters.packageId }}.dll
          **/${{ parameters.packageId }}.winmd
          **/${{ parameters.packageId }}.exe
        UseMinimatch: true
        signConfigType: inlineSignParams
        inlineOperation: |
          [
            {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolSign",
              "Parameters" : {
                "OpusName" : "Microsoft",
                "OpusInfo" : "http://www.microsoft.com",
                "FileDigest" : "/fd \"SHA256\"",
                "PageHash" : "/PH",
                "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              },
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
            },
            {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
            }
          ]

  # NuGetCommand@2 workaround: https://developercommunity.visualstudio.com/content/problem/288534/vsts-yaml-build-failure-the-task-name-nugetcommand.html
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: '${{ parameters.packageId }} - Nuget pack'
    inputs:
      command: pack
      verbosityPack: 'Detailed'
      packagesToPack: $(System.DefaultWorkingDirectory)/ReactWindows/${{ parameters.packageId }}.nuspec
      packDestination: $(System.DefaultWorkingDirectory)/NugetRootFinal
      buildProperties: version=${{ parameters.packageVersion }};id=${{ parameters.packageId }};${{ parameters.buildProperties }}

  - ${{ if eq(parameters.codesignNuget, true) }}:
    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: '${{ parameters.packageId }} CodeSign NuGet'
      inputs:
        ConnectedServiceName: ReactNativeSigning
        FolderPath: $(System.DefaultWorkingDirectory)/NugetRootFinal
        Pattern: |
          **/${{ parameters.packageId }}.${{ parameters.packageVersion }}.nupkg
        UseMinimatch: true
        signConfigType: inlineSignParams
        inlineOperation: |
          [
            {
                "KeyCode" : "CP-401405",
                "OperationCode" : "NuGetSign",
                "Parameters" : {},
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
            },
            {
                "KeyCode" : "CP-401405",
                "OperationCode" : "NuGetVerify",
                "Parameters" : {},
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
            }
          ]

  - powershell: gci $(System.DefaultWorkingDirectory)/NugetRootFinal
    displayName: List files in NugetRootFinal

  - script: |
      set TestFeed=$(System.DefaultWorkingDirectory)\NugetTestFeed
      if NOT EXIST %TestFeed% (mkdir %TestFeed%)
      nuget add $(System.DefaultWorkingDirectory)\NugetRootFinal\${{ parameters.packageId }}.${{ parameters.packageVersion }}.nupkg -Source %TestFeed%
    displayName: '${{ parameters.packageId }} - Nuget push to local test feed'
