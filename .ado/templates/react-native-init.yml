#
parameters:
  - name: language
    type: string
    values:
      - cpp
      - cs
  - name: platform
    type: string
    values:
      - x86
      - x64
      - ARM64
  - name: configuration
    type: string
    values:
      - Debug
      - Release
  - name: projectType
    type: string
    values:
      - app
      - lib
  - name: additionalRunArguments
    type: string
    default: ''
  - name: useNuGet
    type: boolean
    default: false
  - name: runWack
    type: boolean
    default: false
  - name: initPath
    type: string
    default: ReactNativeWindowsInit
    values:
      - ReactNativeWindowsInit
      - InitWindows
  - name: additionalInitArguments
    type: string
    default: ''
  - name: buildEnvironment
    type: string
    default: PullRequest
    values: 
     - PullRequest
     - Continuous

steps:
  - powershell: start-process verdaccio.cmd -ArgumentList @('--config', './.ado/verdaccio/config.yaml')
    displayName: Launch test npm server (verdaccio)

  - script: node .ado/scripts/waitForVerdaccio.js
    displayName: Wait for verdaccio server to boot

  - script: node .ado/scripts/npmAddUser.js user pass mail@nomail.com http://localhost:4873
    displayName: Add npm user to verdaccio

  - template: compute-beachball-branch-name.yml

  - script: npx beachball publish --branch origin/$(BeachBallBranchName) --no-push --registry http://localhost:4873 --yes --verbose --access public --changehint "Run `yarn change` from root of repo to generate a change file."
    displayName: Publish packages to verdaccio

  - template: set-version-vars.yml
    parameters:
      buildEnvironment: ${{ parameters.buildEnvironment }}

  - ${{ if eq(parameters.useNuGet, true) }}:
    - template: prep-and-pack-nuget.yml
      parameters:
        artifactName: ReactWindows
        npmVersion: $(npmVersion)
        packMicrosoftReactNative: true
        ${{ if eq(parameters.language, 'cpp') }}:
          packMicrosoftReactNativeCxx: true
        ${{ if eq(parameters.language, 'cs') }}:
          packMicrosoftReactNativeManaged: true
          packMicrosoftReactNativeManagedCodeGen: true
        slices:
          - platform: ${{ parameters.platform }}
            configuration: Release

  - ${{ if eq(parameters.projectType, 'app') }}:
    - script: |
        npx --yes react-native@$(reactNativeDevDependency) init testcli --template react-native@$(reactNativeDevDependency)
      displayName: Init new app project
      workingDirectory: $(Agent.BuildDirectory)

  - ${{ if eq(parameters.projectType, 'lib') }}:
    - script: |
        npx --yes create-react-native-module@0.20.2 --package-name "testcli" testcli
      displayName: Init new lib project
      workingDirectory: $(Agent.BuildDirectory)

    - script: |
        call yarn install
        call yarn upgrade react@$(reactDevDependency) --dev
        call yarn upgrade react-native@$(reactNativeDevDependency) --dev
      displayName: Update lib project react and react-native dev versions
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - script: yarn config set registry http://localhost:4873
    displayName: Modify yarn config to point to local verdaccio server

  - ${{ if eq(parameters.initPath, 'ReactNativeWindowsInit') }}:

    - ${{ if eq(parameters.useNuget, true) }}:
      - script: |
          npx --yes react-native-windows-init@latest --verbose --version $(npmVersion) --overwrite --language ${{ parameters.language }} --projectType ${{ parameters.projectType }} ${{ parameters.additionalInitArguments }} --experimentalNuGetDependency true --nuGetTestFeed $(System.DefaultWorkingDirectory)\NuGetTestFeed
        displayName: Apply windows template (with nuget)
        workingDirectory: $(Agent.BuildDirectory)\testcli
        env:
          npm_config_registry: http://localhost:4873

    - ${{ if eq(parameters.useNuget, false) }}:
      - script: |
          npx --yes react-native-windows-init@latest --verbose --version $(npmVersion) --overwrite --language ${{ parameters.language }} --projectType ${{ parameters.projectType }} ${{ parameters.additionalInitArguments }}
        displayName: Apply windows template (without nuget)
        workingDirectory: $(Agent.BuildDirectory)\testcli
        env:
          npm_config_registry: http://localhost:4873

    - ${{ if eq(parameters.projectType, 'app') }}:
      - powershell: |
          [xml] $manifest = Get-Content .\Package.appxmanifest
          $manifest.Package.Identity.Name = 'ReactNative.InitTest'
          $manifest.Save("$pwd\Package.appxmanifest")
        displayName: Set AppX package name to "ReactNative.InitTest"
        workingDirectory: $(Agent.BuildDirectory)\testcli\windows\testcli
  
  - ${{ if eq(parameters.initPath, 'InitWindows') }}:
    - ${{ if and(eq(parameters.projectType, 'app'), eq(parameters.language, 'cpp')) }}:
      - script: |
          call yarn add react-native-windows@$(npmVersion)
          call yarn react-native init-windows --template cpp-app --overwrite --logging ${{ parameters.additionalInitArguments }}
        displayName: Call react-native init-windows
        workingDirectory: $(Agent.BuildDirectory)\testcli
        env:
          npm_config_registry: http://localhost:4873
      
      - powershell: |
          [xml] $manifest = Get-Content .\Package.appxmanifest
          $manifest.Package.Identity.Name = 'ReactNative.InitTest'
          $manifest.Save("$pwd\Package.appxmanifest")
        displayName: Set AppX package name to "ReactNative.InitTest"
        workingDirectory: $(Agent.BuildDirectory)\testcli\windows\testcli.Package

  # Reclaim memory used by Verdaccio to reduce the chance of build OOM issues
  - script: tskill node
    displayName: Kill Verdaccio
    condition: succeededOrFailed()

  - task: PowerShell@2
    displayName: Start tracing
    inputs:
      targetType: filePath # filePath | inline
      filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tracing\Start-Tracing.ps1

  # Useful info to have in the log, but also a necessary workaround to make sure the cli is cached by npx
  - script: npx react-native info
    displayName: React Native Info
    workingDirectory: $(Agent.BuildDirectory)\testcli

  # Verify react-native doctor command works
  - script: npx react-native doctor
    displayName: React Native Doctor
    workingDirectory: $(Agent.BuildDirectory)\testcli

  - template: ../templates/run-windows-with-certificates.yml
    parameters:
      buildEnvironment: ${{ parameters.BuildEnvironment }}
      certificateName: RNWEncodedKey
      buildConfiguration: ${{ parameters.configuration }}
      buildPlatform: ${{ parameters.platform }}
      deployOption: ${{ parameters.additionalRunArguments }}
      buildLogDirectory: $(Build.BinariesDirectory)\${{ parameters.platform }}\${{ parameters.configuration }}\BuildLogs
      workingDirectory: $(Agent.BuildDirectory)\testcli
      restoreLockedMode: false # Allow new lockfile to be created

  - template: upload-build-logs.yml
    parameters:
      buildLogDirectory: '$(Build.BinariesDirectory)\${{ parameters.platform }}\${{ parameters.configuration }}\BuildLogs'

  # Only test bundling in debug since we already bundle as part of release builds
  - ${{ if and(eq(parameters.projectType, 'app'), eq(parameters.configuration, 'Debug')) }}:
    - script: npx react-native bundle --entry-file index.js --platform windows --bundle-output test.bundle
      displayName: Create bundle testcli
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - ${{ if eq(parameters.runWack, true) }}:
    - template: ../templates/run-wack.yml
      parameters:
        packageName: ReactNative.InitTest
        reportArtifact: 'Template App WACK Report ${{ parameters.platform }} ${{ parameters.configuration }} ($(System.JobAttempt))'

  # We are experiencing random package restore failures.
  # We want to uploading the vedaccio logs to aid in diagnosing if it is verdaccio or npmjs.org
  - task: PublishPipelineArtifact@1
    displayName: Upload Verdaccio.log (on failure)
    inputs:
      targetPath: 'verdaccio.log'
      artifact: '$(Agent.JobName).Verdaccio.log-$(System.JobAttempt)'
    condition: failed()

  - task: PowerShell@2
    displayName: Stop tracing
    inputs:
      targetType: filePath # filePath | inline
      filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tracing\Stop-Tracing.ps1
      arguments: -NoAnalysis -outputFolder $(Build.StagingDirectory)/Tracing
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: Upload traces
    inputs:
      pathtoPublish: '$(Build.StagingDirectory)/Tracing'
      artifactName: 'Traces - $(Agent.JobName)-$(System.JobAttempt)'
    condition: succeededOrFailed()
