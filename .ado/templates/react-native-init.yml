#
parameters:
  - name: language
    type: string
    values:
      - cpp
      - cs
  - name: platform
    type: string
    values:
      - x86
      - x64
      - arm64
  - name: configuration
    type: string
    values:
      - Debug
      - Release
  - name: projectType
    type: string
    values:
      - app
      - lib
  - name: additionalRunArguments
    type: string
    default: ''
  - name: useNuGet
    type: boolean
    default: false
  - name: vsComponents
    type: string
    default: ''
  - name: listVsComponents
    type: boolean
    default: false
  - name: installVsComponents
    type: boolean
    default: false
  - name: runWack
    type: boolean
    default: false
  - name: additionalInitArguments
    type: string
    default: ''
  - name: buildEnvironment
    type: string
    default: PullRequest
    values:
      - PullRequest
      - Continuous

steps:
  - checkout: self # self represents the repo where the initial Pipelines YAML file was found
    clean: true # whether to fetch clean each time
    # fetchDepth: 2 # the depth of commits to ask Git to fetch
    lfs: false # whether to download Git-LFS files
    submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
    persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

  - template: configure-git.yml

  # First do a build of the local package, since we point the cli at the local files, it needs to be pre-built
  - template: yarn-install.yml

  - script: yarn build
    displayName: yarn build

  - powershell: start-process npx -ArgumentList @('verdaccio', '--config', './.ado/verdaccio/config.yaml')
    displayName: Launch test npm server (verdaccio)

  - script: node .ado/scripts/waitForVerdaccio.js
    displayName: Wait for verdaccio server to boot

  - script: node .ado/scripts/npmAddUser.js user pass mail@nomail.com http://localhost:4873
    displayName: Add npm user to verdaccio

  - template: compute-beachball-branch-name.yml

  - script: npx --no-install beachball publish --branch origin/$(BeachBallBranchName) --no-push --registry http://localhost:4873 --yes --access public --changehint "Run `yarn change` from root of repo to generate a change file."
    displayName: Publish packages to verdaccio

    # Beachball reverts to local state after publish, but we need to know the new version it pushed.
  - script: npx --no-install beachball bump --branch origin/$(BeachBallBranchName) --yes
    displayName: beachball bump

  - template: set-version-vars.yml
    parameters:
      buildEnvironment: ${{ parameters.buildEnvironment }}

  # The commit tag in the nuspec requires that we use at least nuget 5.8 (because things break with nuget versions before and Vs 16.8 or later)
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: ">=5.8.0"

  - ${{ if eq(parameters.useNuGet, true) }}:
    - template: prep-and-pack-nuget.yml
      parameters:
        npmVersion: $(npmVersion)
        packDesktop: false
        slices: '("${{ parameters.platform }}.${{ parameters.configuration }}")'

  # We force the usage of npm instead of yarn because yarn has fragility issues when redirected to a different server (such as verdaccio)
  # We use --no-install and symlink the node_modules from the source tree to avoid having npx download react-native and all it dependencies
  # which takes over a minute on the CI machines.
  - ${{ if eq(parameters.projectType, 'app') }}:
    - script: |
        mklink /D node_modules $(System.DefaultWorkingDirectory)\node_modules
        npx --no-install react-native init testcli --npm --template react-native@$(reactNativeDevDependency)
      displayName: Init new app project
      workingDirectory: $(Agent.BuildDirectory)

  - ${{ if eq(parameters.projectType, 'lib') }}:
    - script: |
        mklink /D node_modules $(System.DefaultWorkingDirectory)\node_modules
        npx create-react-native-module --package-name "testcli" testcli
      displayName: Init new lib project
      workingDirectory: $(Agent.BuildDirectory)

    - script: |
        call yarn install
        call yarn upgrade react@$(reactDevDependency) --dev
        call yarn upgrade react-native@$(reactNativeDevDependency) --dev
      displayName: Update lib project react and react-native dev versions
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - script: npm set registry http://localhost:4873
    displayName: Modify default npm config to point to local verdaccio server

  - script: npm set fetch-retries 10
    displayName: Allow additional npm fetch retries

  - ${{ if eq(parameters.useNuget, true) }}:
    - script: npx react-native-windows-init --verbose --version $(npmVersion) --overwrite --language ${{ parameters.language }} --projectType ${{ parameters.projectType }} ${{ parameters.additionalInitArguments }} --experimentalNuGetDependency true --nuGetTestFeed $(System.DefaultWorkingDirectory)\NuGetTestFeed
      displayName: Apply windows template (with nuget)      
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - ${{ if eq(parameters.useNuget, false) }}:
    - script: npx react-native-windows-init --verbose --version $(npmVersion) --overwrite --language ${{ parameters.language }} --projectType ${{ parameters.projectType }} ${{ parameters.additionalInitArguments }}
      displayName: Apply windows template (without nuget)
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - ${{ if eq(parameters.projectType, 'app') }}:
    - powershell: |
        [xml] $manifest = Get-Content .\Package.appxmanifest
        $manifest.Package.Identity.Name = 'ReactNative.InitTest'
        $manifest.Save("$pwd\Package.appxmanifest")
      displayName: Set AppX package name to "ReactNative.InitTest"
      workingDirectory: $(Agent.BuildDirectory)\testcli\windows\testcli

  # Reclaim memory used by Verdaccio to reduce the chance of build OOM issues
  - script: tskill node
    displayName: Kill Verdaccio
    condition: succeededOrFailed()

  - ${{ if eq(parameters.listVsComponents, true) }}:
    - task: PowerShell@2
      displayName: List Visual Studio Components
      inputs:
        targetType: filePath
        filePath: $(Build.SourcesDirectory)/.ado/scripts/VSComponentList.ps1

    - task: PowerShell@2
      displayName: Install Visual Studio dependencies
      inputs:
        targetType: filePath
        filePath: $(Build.SourcesDirectory)/vnext/Scripts/Tfs/Install-VsFeatures.ps1
        arguments:
          -Components ${{ parameters.vsComponents }}
          -Cleanup:$true

  - script: .ado\scripts\SetupLocalDumps.cmd cl
    displayName: Set LocalDumps for cl.exe

  - script: .ado\scripts\SetupLocalDumps.cmd link
    displayName: Set LocalDumps for link.exe

  - script: .ado\scripts\SetupLocalDumps.cmd msbuild
    displayName: Set LocalDumps for msbuild.exe

  - task: PowerShell@2
    displayName: Start tracing
    inputs:
      targetType: filePath # filePath | inline
      filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tracing\Start-Tracing.ps1

  # Useful info to have in the log, but also a necessary workaround to make sure the cli is cached by npx
  - script: npx react-native info
    displayName: React Native Info
    workingDirectory: $(Agent.BuildDirectory)\testcli

  # Verify react-native doctor command works
  - script: npx react-native doctor
    displayName: React Native Doctor
    workingDirectory: $(Agent.BuildDirectory)\testcli

  - template: ../templates/run-windows-with-certificates.yml
    parameters:
      buildEnvironment: ${{ parameters.BuildEnvironment }}
      certificateName: RNWEncodedKey
      buildConfiguration: ${{ parameters.configuration }}
      buildPlatform: ${{ parameters.platform }}
      deployOption: ${{ parameters.additionalRunArguments }}
      buildLogDirectory: $(Build.BinariesDirectory)\${{ parameters.platform }}\${{ parameters.configuration }}\BuildLogs
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - template: upload-build-logs.yml
    parameters:
      buildLogDirectory: '$(Build.BinariesDirectory)\${{ parameters.platform }}\${{ parameters.configuration }}\BuildLogs'

  # Only test bundling in debug since we already bundle as part of release builds
  - ${{ if and(eq(parameters.projectType, 'app'), eq(parameters.configuration, 'Debug')) }}:
    - script: npx --no-install react-native bundle --entry-file index.js --platform windows --bundle-output test.bundle
      displayName: Create bundle testcli
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - ${{ if eq(parameters.runWack, true) }}:
    - template: ../templates/run-wack.yml
      parameters:
        packageName: ReactNative.InitTest
        reportArtifact: 'Template App WACK Report ${{ parameters.platform }} ${{ parameters.configuration }} ($(System.JobAttempt))'

  # We are experiencing random package restore failures.
  # We want to uploading the vedaccio logs to aid in diagnosing if it is verdaccio or npmjs.org
  - task: PublishPipelineArtifact@1
    displayName: Upload Verdaccio.log (on failure)
    inputs:
      targetPath: 'verdaccio.log'
      artifact: '$(Agent.JobName).Verdaccio.log-$(System.JobAttempt)'
    condition: failed()

  - task: PowerShell@2
    displayName: Stop tracing
    inputs:
      targetType: filePath # filePath | inline
      filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tracing\Stop-Tracing.ps1
      arguments: -NoAnalysis -outputFolder $(Build.StagingDirectory)/Tracing
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: Upload traces
    inputs:
      pathtoPublish: '$(Build.StagingDirectory)/Tracing'
      artifactName: 'Traces - $(Agent.JobName)-$(System.JobAttempt)'
    condition: succeededOrFailed()
