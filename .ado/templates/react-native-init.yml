#
parameters:
  - name: language
    type: string
  - name: platform
    type: string
  - name: configuration
    type: string
  - name: projectType
    type: string
  - name: additionalRunArguments
    type: string
    default: ''
  - name: useNuGet
    type: boolean
    default: false
  - name: vsComponents
    type: string
    default: ''
  - name: listVsComponents
    type: boolean
    default: false
  - name: installVsComponents
    type: boolean
    default: false
  - name: additionalInitArguments
    type: string
    default: ''
  - name: continueOnBuildFailure
    type: boolean
    default: false

steps:
  - checkout: self # self represents the repo where the initial Pipelines YAML file was found
    clean: true # whether to fetch clean each time
    # fetchDepth: 2 # the depth of commits to ask Git to fetch
    lfs: false # whether to download Git-LFS files
    submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
    persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

  # First do a build of the local package, since we point the cli at the local files, it needs to be pre-built
  - template: yarn-install.yml

  - task: CmdLine@2
    displayName: yarn build
    inputs:
      script: yarn build

  - task: PowerShell@2
    displayName: Launch test npm server (verdaccio)
    inputs:
      targetType: inline
      script: |
        start-process npx -ArgumentList @('verdaccio', '--config', './.ado/verdaccio/config.yaml')

  - script: |
      node .ado/waitForVerdaccio.js
    displayName: Wait for verdaccio server to boot

  - script: |
      node .ado/npmAddUser.js user pass mail@nomail.com http://localhost:4873
    displayName: Add npm user to verdaccio

  - script: |
      npx --no-install beachball publish --branch origin/$(System.PullRequest.TargetBranch) --no-push --registry http://localhost:4873 --yes --access public --changehint "Run `yarn change` from root of repo to generate a change file."
    displayName: Publish packages to verdaccio

  - template: set-version-vars.yml

  # The commit tag in the nuspec requires that we use at least nuget 5.8 (because things break with nuget versions before and Vs 16.8 or later)
  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: ">=5.8.0"

  - ${{ if eq(parameters.useNuGet, true) }}:
    - template: prep-and-pack-nuget.yml
      parameters:
        npmVersion: $(npmVersion)
        packDesktop: false
        slices: '("${{ parameters.platform }}.${{ parameters.configuration }}")'
  
  # Work around issue of parameters not getting expanded in conditions properly
  - powershell: |
      Write-Host "##vso[task.setvariable variable=localProjectType]${{ parameters.projectType}}"

  # We force the usage of npm instead of yarn because yarn has fragility issues when redirected to a different server (such as verdaccio)
  - task: CmdLine@2
    displayName: Init new app project
    inputs:
      script: npx react-native init testcli --npm --template react-native@$(reactNativeDevDependency)
      workingDirectory: $(Agent.BuildDirectory)
    condition: and(succeeded(), eq(variables['localProjectType'], 'app'))
  
  - task: CmdLine@2
    displayName: Init new lib project
    inputs:
      script: npx create-react-native-module@^0.19.0 --module-name "testcli" testcli
      workingDirectory: $(Agent.BuildDirectory)
    condition: and(succeeded(), eq(variables['localProjectType'], 'lib'))
  
  - task: CmdLine@2
    displayName: Update lib project react and react-native dev versions
    inputs:
      script: |
        call yarn install
        call yarn upgrade react@$(reactDevDependency) --dev
        call yarn upgrade react-native@$(reactNativeDevDependency) --dev
      workingDirectory: $(Agent.BuildDirectory)\testcli
    condition: and(succeeded(), eq(variables['localProjectType'], 'lib'))

  - script: |
      npm set registry http://localhost:4873
    displayName: Modify default npm config to point to local verdaccio server

  - script: |
      npm set fetch-retries 10
    displayName: Allow additional npm fetch retries

  - task: CmdLine@2
    displayName: Apply windows template (with nuget)
    inputs:
      script: npx react-native-windows-init --verbose --version $(npmVersion) --overwrite --language ${{ parameters.language }} --projectType ${{ parameters.projectType }} ${{ parameters.additionalInitArguments }} --experimentalNuGetDependency true --nuGetTestFeed $(System.DefaultWorkingDirectory)\NuGetTestFeed
      workingDirectory: $(Agent.BuildDirectory)\testcli
    condition: and(succeeded(), ${{ parameters.useNuGet }})

  - task: CmdLine@2
    displayName: Apply windows template (without nuget)
    inputs:
      script: npx react-native-windows-init --verbose --version $(npmVersion) --overwrite --language ${{ parameters.language }} --projectType ${{ parameters.projectType }} ${{ parameters.additionalInitArguments }}
      workingDirectory: $(Agent.BuildDirectory)\testcli
    condition: and(succeeded(), ${{ not(parameters.useNuGet) }})

  # Reclaim memory used by Verdaccio to reduce the chance of build OOM issues
  - script: tskill node
    displayName: Kill Verdaccio
    condition: succeededOrFailed()

  - task: PowerShell@2
    displayName: List Visual Studio Components
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/.ado/VSComponentList.ps1
    condition: and(succeeded(), ${{ parameters.listVsComponents }})

  - task: PowerShell@2
    displayName: Install Visual Studio dependencies
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/vnext/Scripts/Tfs/Install-VsFeatures.ps1
      arguments:
        -Components ${{ parameters.vsComponents }}
        -Cleanup:$true
    condition: and(succeeded(), ${{ parameters.installVsComponents }})

  - task: CmdLine@2
    displayName: Set LocalDumps for cl.exe
    inputs:
      script: $(Build.SourcesDirectory)\.ado\SetupLocalDumps.cmd cl
      workingDirectory: $(Build.SourcesDirectory)

  - task: CmdLine@2
    displayName: Set LocalDumps for link.exe
    inputs:
      script: $(Build.SourcesDirectory)\.ado\SetupLocalDumps.cmd link
      workingDirectory: $(Build.SourcesDirectory)

  - task: CmdLine@2
    displayName: Set LocalDumps for msbuild.exe
    inputs:
      script: $(Build.SourcesDirectory)\.ado\SetupLocalDumps.cmd msbuild
      workingDirectory: $(Build.SourcesDirectory)

  # Work around issue of parameters not getting expanded in conditions properly
  - powershell: |
      Write-Host "##vso[task.setvariable variable=localConfig]${{ parameters.configuration}}"
      Write-Host "##vso[task.setvariable variable=MSBUILDDEBUGPATH]$(Build.StagingDirectory)\CrashDumps"

  # Useful info to have in the log, but also a necessary workaround to make sure the cli is cached by npx
  - task: CmdLine@2
    displayName: React Native Info
    inputs:
      script: npx react-native info
      workingDirectory: $(Agent.BuildDirectory)\testcli

  # https://github.com/actions/virtual-environments/issues/3038#issuecomment-815531497
  - task: PowerShell@2
    displayName: Nuget Add Source If Missing
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/.ado/ConditionalNugetAdd.ps1

  # https://github.com/actions/virtual-environments/issues/3038#issuecomment-816450054
  - task: PowerShell@2
    displayName: Remove Empty Config From AppData
    inputs:
      targetType: inline
      script: Remove-Item $env:APPDATA\NuGet\NuGet.Config

  - task: CmdLine@2
    displayName: Build project (Release)
    inputs:
      script: npx --no-install react-native run-windows --arch ${{ parameters.platform }} --no-launch --logging --buildLogDirectory $(Build.BinariesDirectory)\${{ parameters.platform }}\${{ parameters.configuration }}\BuildLogs --release ${{ parameters.additionalRunArguments }}
      workingDirectory: $(Agent.BuildDirectory)\testcli
    continueOnError: ${{ parameters.continueOnBuildFailure }}
    condition: and(succeeded(), eq('Release', variables['localConfig']))

  - task: CmdLine@2
    displayName: Build project (Debug)
    inputs:
      script: npx --no-install react-native run-windows --arch ${{ parameters.platform }} --no-launch --logging --buildLogDirectory $(Build.BinariesDirectory)\${{ parameters.platform }}\${{ parameters.configuration }}\BuildLogs ${{ parameters.additionalRunArguments }}
      workingDirectory: $(Agent.BuildDirectory)\testcli
    continueOnError: ${{ parameters.continueOnBuildFailure }}
    condition: and(succeeded(), eq('Debug', variables['localConfig']))

  - template: upload-build-logs.yml
    parameters:
      buildLogDirectory: '$(Build.BinariesDirectory)\${{ parameters.platform }}\${{ parameters.configuration }}\BuildLogs'

  - task: CmdLine@2
    displayName: Create bundle testcli
    inputs:
      script: npx --no-install react-native bundle --entry-file index.js --platform windows --bundle-output test.bundle
      workingDirectory: $(Agent.BuildDirectory)\testcli
    condition: and(succeeded(), eq(variables['localProjectType'], 'app'))

  # We are experiencing random package restore failures.
  # We want to uploading the vedaccio logs to aid in diagnosing if it is verdaccio or npmjs.org
  - task: PublishPipelineArtifact@1
    displayName: Upload Verdaccio.log (on failure)
    inputs:
      targetPath: 'verdaccio.log'
      artifact: '$(Agent.JobName).Verdaccio.log-$(System.JobAttempt)'
    condition: failed()

