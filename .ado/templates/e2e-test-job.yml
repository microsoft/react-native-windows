#
parameters:
  name: ''
  BuildPlatform: x86 # ARM, x86, x64

jobs:
  - job: ${{ parameters.name }}
    displayName: E2E Test
    dependsOn: Setup
    condition: ne( dependencies.Setup.outputs['checkPayload.shouldSkipPRBuild'], 'True' )

    variables:
      - template: ../variables/vs2019.yml
      - name: BuildLogDirectory
        value: $(Build.BinariesDirectory)\$(BuildPlatform)\BuildLogs

    pool:
      vmImage: $(VmImage)

    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

    steps:
      - checkout: self
        clean: true
        fetchDepth: 1 # the depth of commits to ask Git to fetch
        submodules: false
            
      - template: prepare-env.yml

      - task: CmdLine@2
        displayName: Set LocalDumps
        inputs:
          script: $(Build.SourcesDirectory)\.ado\SetupLocalDumps.cmd ReactUWPTestApp
          workingDirectory: $(Build.SourcesDirectory)

      - task: CmdLine@2
        displayName: Set up AppVerifer on ReactUWPTestApp
        inputs:
          script: regedit /S $(Build.SourcesDirectory)\.ado\ReactUWPTestApp.reg
          workingDirectory: $(Build.SourcesDirectory)
        condition: false # Must be manually enabled, since it causes a 5x perf reduction that causes test instability

      # See Issue 6393 for details
      - powershell: |
          Invoke-WebRequest https://github.com/microsoft/WinAppDriver/releases/download/v1.1/WindowsApplicationDriver.msi -OutFile $(Agent.TempDirectory)\WinAppDriver.msi
          Start-Process msiexec -ArgumentList "/quiet","/x","{087BBF93-D9E3-4D27-BDBE-9C702E0066FC}" -Verb runAs -Wait
          Start-Process msiexec -ArgumentList "/quiet","/i","$(Agent.TempDirectory)\WinAppDriver.msi" -Verb runAs -Wait
        displayName: Replace WinAppDriver 1.2.1 with WinAppDriver 1.1

      - task: CmdLine@2
        displayName: run-windows
        inputs:
          script: yarn windows --no-launch --no-packager --arch ${{ parameters.BuildPlatform }} --release --logging --buildLogDirectory $(BuildLogDirectory) --msbuildprops BaseIntDir=$(BaseIntDir)
          workingDirectory: packages/E2ETest

      - task: CopyFiles@2
        displayName: Copy ReactUWPTestApp artifacts
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/packages/E2ETest/windows/ReactUWPTestApp
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestApp
          contents: AppPackages\**
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        displayName: "Publish Artifact:ReactUWPTestApp"
        inputs:
          artifactName: ReactUWPTestApp-$(System.JobAttempt)
          targetPath: $(Build.StagingDirectory)/ReactUWPTestApp
        condition: succeededOrFailed()

      - task: CmdLine@2
        displayName: run e2etest
        inputs:
          script: yarn run e2etest
          workingDirectory: packages/E2ETest

      - task: CopyFiles@2
        displayName: Copy test report
        inputs:
          sourceFolder: $(Build.SourcesDirectory)\packages\E2ETest\reports
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump/reports
        condition: succeededOrFailed()

      - task: CopyFiles@2
        displayName: Copy tree dump output files
        inputs:
          sourceFolder: $(UserProfile)\Documents\ReactUWPTestApp_cezq6h4ygq1hw!App
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump
          contents: TreeDump\**
        condition: succeededOrFailed()

      - task: CopyFiles@2
        displayName: Copy tree dump screenshots
        inputs:
          sourceFolder: $(Build.SourcesDirectory)\packages\E2ETest\errorShots
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump
        condition: succeededOrFailed()

      - task: PowerShell@2
        displayName: "MSInfo32"
        inputs:
          targetType: "inline"
          script: "Start-Process msinfo32 -ArgumentList '/report $(Build.StagingDirectory)\\ReactUWPTestAppTreeDump\\msinfo32.txt' -Wait"
        condition: failed()

      - task: PowerShell@2
        displayName: "Get-ShellScaling"
        inputs:
          targetType: "inline"
          script: ". $(Build.SourcesDirectory)\\.ado\\Get-ShellScaling.ps1 > $(Build.StagingDirectory)\\ReactUWPTestAppTreeDump\\scaleFactor.txt"
        condition: failed()

      - task: PublishPipelineArtifact@1
        displayName: "Publish Artifact:ReactUWPTestAppTreeDump"
        inputs:
          artifactName: ReactUWPTestAppTreeDump-$(System.JobAttempt)
          targetPath: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "packages/E2ETest/reports/*.log"
        condition: succeededOrFailed()

      - task: PowerShell@2
        displayName: "Show appium log"
        inputs:
          targetType: "inline"
          script: "Get-Content packages/E2ETest/reports/appium.txt | foreach {Write-Output $_}"
        condition: failed()

      - task: PowerShell@2
        displayName: List disksize at end of job
        inputs:
          targetType: inline # filePath | inline
          script: |
            Get-WmiObject Win32_LogicalDisk
        condition: succeededOrFailed()

      - template: upload-build-logs.yml
        parameters:
          buildLogDirectory: '$(BuildLogDirectory)'
          condition: succeededOrFailed()
