parameters:
  - name: artifactName
    type: string
  - name: slices
    type: object

  - name: publishCommitId
    type: string
    default: '0'
  - name : npmVersion
    type: string
    default: '0.0.1-pr'

    # Note: NuGet pack expects platform-specific file separators ('\' on Windows).
  - name: nugetroot
    type: string
    default: $(System.DefaultWorkingDirectory)\ReactWindows

  - name: packDesktop
    type: boolean
    default: false
  - name: packMicrosoftReactNative
    type: boolean
    default: false
  - name: packMicrosoftReactNativeCxx
    type: boolean
    default: false
  - name: packMicrosoftReactNativeManaged
    type: boolean
    default: false
  - name: packMicrosoftReactNativeManagedCodeGen
    type: boolean
    default: false
  - name: packMicrosoftReactNativeWindowsAppSDK
    type: boolean
    default: false

  - name: signMicrosoft
    type: boolean
    default: false

steps:
  - pwsh: |
      $slices = ConvertFrom-Json -NoEnumerate '${{ convertToJson(parameters.slices) }}'
      $debugSlices = @($slices.where{$_.configuration -match 'Debug'});
      $releaseSlices = @($slices.where{$_.configuration -match 'Release'});
  
      $sliceTags = $slices | % {$_.platform + "." + $_.configuration} | ConvertTo-Json -AsArray -Compress
      $debugSliceTags = $debugSlices | % {$_.platform + "." + $_.configuration} | ConvertTo-Json -AsArray -Compress
      $releaseSliceTags = $releaseSlices | % {$_.platform + "." + $_.configuration} | ConvertTo-Json -AsArray -Compress

      Write-Host "##vso[task.setvariable variable=allSlices]$sliceTags"
      Write-Host "##vso[task.setvariable variable=debugSlices]$debugSliceTags"
      Write-Host "##vso[task.setvariable variable=releaseSlices]$releaseSliceTags"

      Write-Host "##vso[task.setvariable variable=basePlatform]$($slices[0].platform)"
      Write-Host "##vso[task.setvariable variable=debugBasePlatform]$($debugSlices[0].platform)"
      Write-Host "##vso[task.setvariable variable=releaseBasePlatform]$($releaseSlices[0].platform)"

      Write-Host "##vso[task.setvariable variable=baseConfiguration]$($slices[0].configuration)"
    displayName: Setting slices to keep from NuSpec

  - ${{ each slice in parameters.slices }}:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download ${{ parameters.artifactName }}.${{ slice.platform }}.${{ slice.configuration }}'
      inputs:
        artifact: ${{ parameters.artifactName }}.${{ slice.platform }}.${{ slice.configuration }}
        path: ${{parameters.nugetroot}}/${{ slice.platform }}/${{ slice.configuration }}

  - task: PowerShell@2
    displayName: Copy MSRN Resources to NuGet layout
    inputs:
      filePath: vnext/Scripts/Tfs/Layout-MSRN-Headers.ps1
      arguments: -TargetRoot ${{parameters.nugetroot}}

  - ${{ if eq(parameters.packDesktop, true) }}:
    - task: PowerShell@2
      displayName: Copy Desktop Resources to NuGet layout
      inputs:
        filePath: vnext/Scripts/Tfs/Layout-Desktop-Headers.ps1
        arguments: -TargetRoot ${{parameters.nugetroot}}

  - ${{ if or(eq(parameters.packMicrosoftReactNative, true), eq(parameters.packMicrosoftReactNativeCxx, true), eq(parameters.packMicrosoftReactNativeManaged, true), eq(parameters.packMicrosoftReactNativeManagedCodeGen, true), eq(parameters.packMicrosoftReactNativeWindowsAppsDK, false)) }}:
    - powershell: |
        (Get-Content -Path ${{parameters.nugetroot}}\Microsoft.ReactNative.VersionCheck.targets) -replace '\$\$nuGetPackageVersion\$\$', '${{parameters.npmVersion}}' | Set-Content -Path  ${{parameters.nugetroot}}\Microsoft.ReactNative.VersionCheck.targets
      displayName: Patch version check file with version ${{parameters.npmVersion}}

  - ${{ if eq(parameters.packDesktop, true) }}:
    - template: prep-and-pack-single.yml
      parameters:
        outputPackage: OfficeReact.Win32
        packageVersion: ${{parameters.npmVersion}}
        slices: $(allSlices)
        buildProperties: 'CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}}'

  - ${{ if eq(parameters.packMicrosoftReactNative, true) }}:
    - ${{ if containsValue(parameters.slices.*.configuration, 'Debug') }}:
      - template: prep-and-pack-single.yml
        parameters:
          outputPackage: Microsoft.ReactNative.Debug
          nuspec: Microsoft.ReactNative
          slices: $(debugSlices)
          packageVersion: ${{parameters.npmVersion}}
          codesignBinaries: ${{ parameters.signMicrosoft }}
          codesignNuget: ${{ parameters.signMicrosoft }}
          buildProperties: CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}};baseconfiguration=Debug;baseplatform=$(debugBasePlatform)
    - ${{ if containsValue(parameters.slices.*.configuration, 'Release') }}:
      - template: prep-and-pack-single.yml
        parameters:
          outputPackage: Microsoft.ReactNative
          slices: $(releaseSlices)
          packageVersion: ${{parameters.npmVersion}}
          codesignBinaries: ${{ parameters.signMicrosoft }}
          codesignNuget: ${{ parameters.signMicrosoft }}
          buildProperties: CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}};baseconfiguration=Release;baseplatform=$(releaseBasePlatform)


  - ${{ if eq(parameters.packMicrosoftReactNativeCxx, true) }}:
    - template: prep-and-pack-single.yml
      parameters:
        outputPackage: Microsoft.ReactNative.Cxx
        packageVersion: ${{parameters.npmVersion}}
        buildProperties: CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}};baseconfiguration=$(baseConfiguration);baseplatform=$(basePlatform)
        codesignNuget: ${{ parameters.signMicrosoft }}

  - ${{ if eq(parameters.packMicrosoftReactNativeManaged, true) }}:
    - ${{ if containsValue(parameters.slices.*.configuration, 'Debug') }}:
      - template: prep-and-pack-single.yml
        parameters:
          outputPackage: Microsoft.ReactNative.Managed.Debug
          nuspec: Microsoft.ReactNative.Managed
          slices: $(debugSlices)
          packageVersion: ${{parameters.npmVersion}}
          codesignBinaries: ${{ parameters.signMicrosoft }}
          codesignNuget: ${{ parameters.signMicrosoft }}
          buildProperties: CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}};baseconfiguration=Debug;baseplatform=$(debugBasePlatform)
    - ${{ if containsValue(parameters.slices.*.configuration, 'Release') }}:
      - template: prep-and-pack-single.yml
        parameters:
          outputPackage: Microsoft.ReactNative.Managed
          slices: $(releaseSlices)
          packageVersion: ${{parameters.npmVersion}}
          codesignBinaries: ${{ parameters.signMicrosoft }}
          codesignNuget: ${{ parameters.signMicrosoft }}
          buildProperties: CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}};baseconfiguration=Release;baseplatform=$(releaseBasePlatform)

  - ${{ if eq(parameters.packMicrosoftReactNativeManagedCodeGen, true) }}:
    - template: prep-and-pack-single.yml
      parameters:
        outputPackage: Microsoft.ReactNative.Managed.CodeGen
        packageVersion: ${{parameters.npmVersion}}
        buildProperties: CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}};baseconfiguration=$(baseConfiguration);baseplatform=$(basePlatform)
        codesignBinaries: ${{ parameters.signMicrosoft }}
        codesignNuget: ${{ parameters.signMicrosoft }}

  - ${{ if eq(parameters.packMicrosoftReactNativeWindowsAppsDK, true) }}:
    - ${{ if containsValue(parameters.slices.*.configuration, 'Release') }}:
      - template: prep-and-pack-single.yml
        parameters:
          outputPackage: Microsoft.ReactNative.WindowsAppSDK
          slices: $(releaseSlices)
          packageVersion: ${{parameters.npmVersion}}
          codesignBinaries: ${{ parameters.signMicrosoft }}
          codesignNuget: ${{ parameters.signMicrosoft }}
          buildProperties: CommitId=${{parameters.publishCommitId}};nugetroot=${{parameters.nugetroot}};baseconfiguration=Release;baseplatform=$(releaseBasePlatform)
          binariesToSign: |
            **/Microsoft.ReactNative.dll
            **/Microsoft.ReactNative.winmd
            **/Microsoft.ReactNative.WindowsAppSDK.dll

