name: $(Date:yyyyMMdd).$(Rev:r)

trigger: none # will disable CI builds entirely

pr:
  - master
  - "*-stable"

variables:
  - template: variables/msbuild.yml
  - group: platform-override-zero-permission-token

jobs:
  - job: RNWUniversalPR
    variables:
      - template: variables/vs2019.yml
    displayName: Universal PR
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
          LayoutHeaders: true
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
        ArmDebug:
          BuildConfiguration: Debug
          BuildPlatform: ARM
        ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: ARM
        Arm64Debug:
          BuildConfiguration: Debug
          BuildPlatform: ARM64
        Arm64Release:
          BuildConfiguration: Release
          BuildPlatform: ARM64
    pool:
      vmImage: $(VmImage)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5

    steps:
      - checkout: self
        clean: false
        submodules: false

      - task: NodeTool@0
        displayName: Set Node Version
        inputs:
          versionSpec: '12.x'

      - task: PowerShell@2
        displayName: "Check if this environment meets the development dependencies"
        inputs:
          targetType: filePath
          filePath: $(Build.SourcesDirectory)\vnext\Scripts\rnw-dependencies.ps1
          arguments: -NoPrompt -Tags buildLab

      - template: templates/build-rnw.yml
        parameters:
          yarnBuildCmd: build
          project: vnext/Microsoft.ReactNative.sln

      - powershell: |
            $winmd2md_url = "https://github.com/asklar/winmd2md/releases/download/v0.1.12/winmd2md.exe"
            Invoke-WebRequest -UseBasicParsing $winmd2md_url -OutFile $env:TEMP\winmd2md.exe
            & $env:TEMP\winmd2md.exe /experimental /outputDirectory vnext\target\winmd2md /apiVersion 0.64 vnext\target\x86\Debug\Microsoft.ReactNative\Microsoft.ReactNative.winmd
        displayName: "Generate WinRT API docs"
        condition: and ( eq(variables.BuildConfiguration, 'Debug'), eq(variables.BuildPlatform, 'x86') )

      - task: PublishBuildArtifacts@1
        displayName: Upload WinRT API docs
        condition:  and ( eq(variables.BuildConfiguration, 'Debug'), eq(variables.BuildPlatform, 'x86') )
        inputs:
          pathtoPublish: 'vnext\target\winmd2md'
          artifactName: 'WinRT API docs - $(Agent.JobName)-$(System.JobAttempt)'
          
      - powershell: |
          Write-Debug "Using expression $($env:GOOGLETESTADAPTERPATHEXPRESSION)"
          Write-Host "##vso[task.setvariable variable=GoogleTestAdapterPath]$(Invoke-Expression $env:GOOGLETESTADAPTERPATHEXPRESSION)"
          Write-Host "Set environment variable to ($env:GoogleTestAdapterPath)"
        displayName: Set GoogleTestAdapterPath

      - task: VSTest@2
        displayName: Run Universal Unit Tests (Native)
        timeoutInMinutes: 5 # Set smaller timeout , due to hangs
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: |
            Microsoft.ReactNative.Cxx.UnitTests/Microsoft.ReactNative.Cxx.UnitTests.exe
            Microsoft.ReactNative.IntegrationTests/Microsoft.ReactNative.IntegrationTests.exe
            Mso.UnitTests/Mso.UnitTests.exe
          pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
          searchFolder: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest
        condition: and(succeeded(), not(startsWith(variables.BuildPlatform, 'arm')))

      - task: VSTest@2
        displayName: Run Universal Unit Tests (UWP)
        timeoutInMinutes: 5 # Set smaller timeout , due to hangs
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: |
            Microsoft.ReactNative.Managed.UnitTests/Microsoft.ReactNative.Managed.UnitTests/Microsoft.ReactNative.Managed.UnitTests.build.appxrecipe
          searchFolder: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          codeCoverageEnabled: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest
        condition: and(succeeded(), not(startsWith(variables.BuildPlatform, 'arm')))

      - task: VSTest@2
        displayName: Run Universal Unit Tests (NetCore)
        timeoutInMinutes: 5 # Set smaller timeout , due to hangs
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: |
            Microsoft.ReactNative.Managed.CodeGen.UnitTests/Microsoft.ReactNative.Managed.CodeGen.UnitTests.dll
          searchFolder: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          codeCoverageEnabled: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest
        condition: and(succeeded(), eq(variables.BuildPlatform, 'x64'))

      - template: templates/publish-build-artifacts-for-nuget.yml
        parameters:
          artifactName: ReactWindows
          layoutHeaders: eq('true', variables['LayoutHeaders'])
          contents: |
            Microsoft.ReactNative\**
            Microsoft.ReactNative.Managed\**
            Microsoft.ReactNative.Managed.CodeGen\**
      
      - template: templates/component-governance.yml

  - job: RNW_WinUI3
    variables:
      - template: variables/vs2019.yml
    displayName: WinUI3 Playground
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        X86:
          BuildConfiguration: Debug
          BuildPlatform: x86
    pool:
      vmImage: $(VmImage)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5

    steps:
      - checkout: self
        clean: false
        submodules: false

      - template: templates/prepare-env.yml

      - task: NuGetCommand@2
        displayName: NuGet restore - Playground
        inputs:
          command: restore
          restoreSolution: packages/playground/windows/Playground.sln
          verbosityRestore: Detailed # Options: quiet, normal, detailed

      - task: VSBuild@1
        displayName: VSBuild - Playground
        inputs:
          solution: packages/playground/windows/Playground.sln
          vsVersion: $(MSBuildVersion) # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
          msbuildArchitecture: $(MSBuildArchitecture) # Optional. Options: x86, x64
          platform: $(BuildPlatform) # Optional
          configuration: $(BuildConfiguration) # Optional
          clean: true # Optional
          maximumCpuCount: false # Optional
          restoreNugetPackages: false # Optional
          msbuildArgs:
            /p:PreferredToolArchitecture=$(MSBuildPreferredToolArchitecture)
            /p:PlatformToolset=$(MSBuildPlatformToolset)
            /p:BaseIntDir=$(BaseIntDir)
            /p:AppxPackageSigningEnabled=false
            /p:UseWinUI3=true
            /p:AppxPackageSigningEnabled=false
        continueOnError: true # See issue #6129

      - task: PublishBuildArtifacts@1
        displayName: Upload crash dumps
        inputs:
          pathtoPublish: '$(Build.StagingDirectory)/CrashDumps/'
          artifactName: 'Crash dumps - $(Agent.JobName)-$(System.JobAttempt)'
        condition: failed()


  - job: RNWUniversalOtherProjectsPR
    variables:
      - template: variables/vs2019.yml
    displayName: Universal Other Projects PR
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
    pool:
      vmImage: $(VmImage)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5

    steps:
      - checkout: self
        clean: false
        submodules: false

      - template: templates/prepare-env.yml

      - task: NuGetCommand@2
        displayName: NuGet restore - Playground
        inputs:
          command: restore
          restoreSolution: packages/playground/windows/Playground.sln
          verbosityRestore: Detailed # Options: quiet, normal, detailed

      - task: VSBuild@1
        displayName: VSBuild - Playground
        inputs:
          solution: packages/playground/windows/Playground.sln
          vsVersion: $(MSBuildVersion) # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
          msbuildArchitecture: $(MSBuildArchitecture) # Optional. Options: x86, x64
          platform: $(BuildPlatform) # Optional
          configuration: $(BuildConfiguration) # Optional
          clean: true # Optional
          maximumCpuCount: false # Optional
          restoreNugetPackages: false # Optional
          msbuildArgs:
            /p:PreferredToolArchitecture=$(MSBuildPreferredToolArchitecture)
            /p:PlatformToolset=$(MSBuildPlatformToolset)
            /p:BaseIntDir=$(BaseIntDir)
            /p:AppxPackageSigningEnabled=false

      - powershell: .ado/TestWACK.ps1 $(BuildPlatform) $(BuildConfiguration) $(Build.StagingDirectory)\WACK
        displayName: Test WACK

      - task: PublishBuildArtifacts@1
        displayName: Upload WACK report
        condition:  succeededOrFailed()
        inputs:
          pathtoPublish: '$(Build.StagingDirectory)/WACK'
          artifactName: 'WACK report $(BuildPlatform) $(BuildConfiguration) ($(System.JobAttempt))'

      - task: NuGetCommand@2
        displayName: NuGet restore - Playground Win32
        inputs:
          command: restore
          restoreSolution: packages/playground/windows/Playground-Win32.sln
          verbosityRestore: Detailed # Options: quiet, normal, detailed

      - task: VSBuild@1
        displayName: VSBuild - Playground Win32
        inputs:
          solution: packages/playground/windows/Playground-Win32.sln
          vsVersion: $(MSBuildVersion) # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
          msbuildArchitecture: $(MSBuildArchitecture) # Optional. Options: x86, x64
          platform: $(BuildPlatform) # Optional
          configuration: $(BuildConfiguration) # Optional
          clean: true # Optional
          maximumCpuCount: false # Optional
          restoreNugetPackages: false # Optional
          msbuildArgs:
            /p:PreferredToolArchitecture=$(MSBuildPreferredToolArchitecture)
            /p:PlatformToolset=$(MSBuildPlatformToolset)
            /p:BaseIntDir=$(BaseIntDir)

  - job: RNWSampleAppsPR
    variables:
      - template: variables/vs2019.yml
      - name: BuildLogDirectory
        value: $(Build.BinariesDirectory)\$(BuildPlatform)\$(BuildConfiguration)\BuildLogs
    displayName: Sample Apps PR
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
          DeployOption:
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
          DeployOption: --no-deploy # Can't deploy without certs
        X86Debug:
         BuildConfiguration: Debug
         BuildPlatform: x86
         DeployOption:
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
          DeployOption: --no-deploy # Can't deploy without certs
        ArmDebug:
          BuildConfiguration: Debug
          BuildPlatform: ARM
          DeployOption: --no-deploy
        ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: ARM
          DeployOption: --no-deploy
        Arm64Debug:
          BuildConfiguration: Debug
          BuildPlatform: ARM64
          DeployOption: --no-deploy
        Arm64Release:
          BuildConfiguration: Release
          BuildPlatform: ARM64
          DeployOption: --no-deploy
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    pool:
      vmImage: $(VmImage)

    steps:
      - checkout: self
        clean: false
        submodules: false

      - template: templates/prepare-env.yml

      - task: NuGetCommand@2
        displayName: NuGet restore - SampleApps
        inputs:
          command: restore
          restoreSolution: packages/microsoft-reactnative-sampleapps/windows/SampleApps.sln
          verbosityRestore: Detailed # Options: quiet, normal, detailed
        condition: succeeded()

      - template: templates/run-windows-with-certificates.yml
        parameters:
          buildEnvironment: 'PullRequest'
          encodedKey: sampleAppCPPEncodedKey
          buildConfiguration: $(BuildConfiguration)
          buildPlatform: $(BuildPlatform)
          deployOption: $(DeployOption)
          buildLogDirectory: $(BuildLogDirectory)
          workingDirectory: packages/microsoft-reactnative-sampleapps

      - task: CmdLine@2
        displayName: Create SampleApp bundle
        inputs:
          script: yarn bundle-cpp --verbose
          workingDirectory: packages\microsoft-reactnative-sampleapps
        condition: succeeded()

      - template: templates/upload-build-logs.yml
        parameters:
          buildLogDirectory: '$(BuildLogDirectory)'

  - job: RNWDesktopPR
    variables:
      - template: variables/vs2019.yml
      #5059 - Disable failing or intermittent tests (IntegrationTestHarness,AsyncStorage,WebSocket,Logging).
      #5265 - WebSocketModuleIntegrationTest::WebSocketModule_Ping fails for Release
      - name: Desktop.IntegrationTests.Filter
        value: >
          (FullyQualifiedName!=RNTesterIntegrationTests::AsyncStorage)&
          (FullyQualifiedName!=RNTesterIntegrationTests::IntegrationTestHarness)&
          (FullyQualifiedName!=RNTesterIntegrationTests::WebSocket)&
          (FullyQualifiedName!~WebSocketModule_)&
          (FullyQualifiedName!=WebSocketResourcePerformanceTest::ProcessThreadsPerResource)
    displayName: Desktop PR
    strategy:
      matrix:
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
        ARM64Debug:
          BuildConfiguration: Debug
          BuildPlatform: ARM64
        ARM64Release:
          BuildConfiguration: Release
          BuildPlatform: ARM64
    pool:
      vmImage: $(VmImage)
    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

    steps:
      - checkout: self
        clean: false
        submodules: false

      - template: templates/build-rnw.yml
        parameters:
          yarnBuildCmd: build
          project: vnext/ReactWindows-Desktop.sln

      - task: CmdLine@2
        displayName: Build react-native-win32 RNTester bundle
        inputs:
          script: yarn bundle
          workingDirectory: packages/react-native-win32
        condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Debug'), eq(variables['BuildPlatform'], 'x64'))

      - powershell: |
          Write-Debug "Using expression $($env:GOOGLETESTADAPTERPATHEXPRESSION)"
          Write-Host "##vso[task.setvariable variable=GoogleTestAdapterPath]$(Invoke-Expression $env:GOOGLETESTADAPTERPATHEXPRESSION)"
          Write-Host "Set environment variable to ($env:GoogleTestAdapterPath)"
        displayName: Set GoogleTestAdapterPath

      - task: VSTest@2
        displayName: Run Desktop Unit Tests
        timeoutInMinutes: 5 # Set smaller timeout , due to hangs
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: |
            React.Windows.Desktop.UnitTests/React.Windows.Desktop.UnitTests.dll
            JSI.Desktop.UnitTests/JSI.Desktop.UnitTests.exe
          pathtoCustomTestAdapters: $(GoogleTestAdapterPath)
          searchFolder: $(Build.SourcesDirectory)/vnext/target/$(BuildPlatform)/$(BuildConfiguration)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest

      - template: templates/stop-packagers.yml

      - task: PowerShell@2
        displayName: Set up test servers
        inputs:
          targetType: filePath # filePath | inline
          filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tfs\Start-TestServers.ps1
          arguments: -SourcesDirectory $(Build.SourcesDirectory)\vnext -Preload -SleepSeconds 120
        condition: false # Desktop Integration Tests No Longer Bundling

      - task: PowerShell@2
        displayName: Check the metro bundle server
        inputs:
          targetType: 'inline'
          script: Invoke-WebRequest -UseBasicParsing -Uri "http://localhost:8081/IntegrationTests/IntegrationTestsApp.bundle?platform=windesktop&dev=true"
        condition: false # Desktop Integration Tests No Longer Bundling

      - task: VSTest@2
        displayName: Run Desktop Integration Tests
        inputs:
          testSelector: testAssemblies
          testAssemblyVer2: React.Windows.Desktop.IntegrationTests\React.Windows.Desktop.IntegrationTests.dll
          searchFolder: $(Build.SourcesDirectory)\vnext\target\$(BuildPlatform)\$(BuildConfiguration)
          testFiltercriteria: $(Desktop.IntegrationTests.Filter)
          runTestsInIsolation: true
          platform: $(BuildPlatform)
          configuration: $(BuildConfiguration)
          publishRunAttachments: true
          collectDumpOn: onAbortOnly
          vsTestVersion: latest
          otherConsoleOptions: '/blame -- RunConfiguration.TestSessionTimeout=300000'
        condition: false # Desktop Integration Tests No Longer Bundling
        # Suspected debug assert in TestRunner hanging tests randomly. Run only on Release for now.
        # condition: and(succeeded(), ne(variables['BuildConfiguration'], 'Debug'))

      - template: templates/stop-packagers.yml

      - template: templates/publish-build-artifacts-for-nuget.yml
        parameters:
          artifactName: ReactWindows
          contents: |
            React.Windows.Desktop\**
            React.Windows.Desktop.DLL\**
            React.Windows.Desktop.Test.DLL\**

      - template: templates/component-governance.yml

  - job: CliInit
    variables:
      - template: variables/vs2019.yml
    displayName: Verify react-native init
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        X86DebugCpp:
          language: cpp
          configuration: Debug
          platform: x86
          projectType: app
          additionalInitArguments: --namespace MyCompany.MyApplication.MyComponent
          additionalRunArguments:
        X86DebugCs:
          language: cs
          configuration: Debug
          platform: x86
          projectType: app
          additionalInitArguments: --namespace MyCompany.MyApplication.MyComponent
          additionalRunArguments:
        X86ReleaseCpp:
          language: cpp
          configuration: Release
          platform: x86
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy # Can't deploy without certs
        X86ReleaseCs:
          language: cs
          configuration: Release
          platform: x86
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy # Can't deploy without certs
        X64DebugCpp:
          language: cpp
          configuration: Debug
          platform: x64
          projectType: app
          additionalInitArguments:
          additionalRunArguments:
        X64DebugCs:
          language: cs
          configuration: Debug
          platform: x64
          projectType: app
          additionalInitArguments:
          additionalRunArguments:
        X64ReleaseCpp:
          language: cpp
          configuration: Release
          platform: x64
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy # Can't deploy without certs
        X64ReleaseCs:
          language: cs
          configuration: Release
          platform: x64
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy # Can't deploy without certs
        ArmDebugCpp:
          language: cpp
          configuration: Debug
          platform: arm
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        ArmDebugCs:
          language: cs
          configuration: Debug
          platform: arm
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        ArmReleaseCpp:
          language: cpp
          configuration: Release
          platform: arm
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        ArmReleaseCs:
          language: cs
          configuration: Release
          platform: arm
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        Arm64DebugCpp:
          language: cpp
          configuration: Debug
          platform: arm64
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        Arm64DebugCs:
          language: cs
          configuration: Debug
          platform: arm64
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        Arm64ReleaseCpp:
          language: cpp
          configuration: Release
          platform: arm64
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        Arm64ReleaseCs:
          language: cs
          configuration: Release
          platform: arm64
          projectType: app
          additionalInitArguments:
          additionalRunArguments: --no-deploy
        X86DebugCppLib:
          language: cpp
          configuration: Debug
          platform: x86
          projectType: lib
          additionalInitArguments:
          additionalRunArguments: --no-autolink --no-deploy
        X86DebugCsLib:
          language: cs
          configuration: Debug
          platform: x86
          projectType: lib
          additionalInitArguments:
          additionalRunArguments: --no-autolink --no-deploy
        X64DebugCppLib:
          language: cpp
          configuration: Debug
          platform: x64
          projectType: lib
          additionalInitArguments:
          additionalRunArguments: --no-autolink --no-deploy
        X64DebugCsLib:
          language: cs
          configuration: Debug
          platform: x64
          projectType: lib
          additionalInitArguments:
          additionalRunArguments: --no-autolink --no-deploy
        Arm64DebugCppLib:
          language: cpp
          configuration: Debug
          platform: arm64
          projectType: lib
          additionalInitArguments:
          additionalRunArguments: --no-autolink --no-deploy
        ArmDebugCsLib:
          language: cs
          configuration: Debug
          platform: arm64
          projectType: lib
          additionalInitArguments:
          additionalRunArguments: --no-autolink --no-deploy

    timeoutInMinutes: 50 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    pool:
      vmImage: $(VmImage)
    steps:
      - template: templates/react-native-init.yml
        parameters:
          language: $(language)
          configuration: $(configuration)
          platform: $(platform)
          additionalInitArguments: $(additionalInitArguments)
          additionalRunArguments: $(additionalRunArguments)
          projectType: $(projectType)

  - job: CliInitWinUI3
    variables:
      - template: variables/vs2019.yml
    displayName: Verify react-native init WinUI3
    strategy:
      matrix: # Why we only build some flavors: https://github.com/microsoft/react-native-windows/issues/4308
        X86DebugCpp:
          language: cpp
          configuration: Debug
          platform: x86
        X86DebugCs:
          language: cs
          configuration: Debug
          platform: x86
    timeoutInMinutes: 50 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    pool:
      vmImage: $(VmImage)
    steps:
      - template: templates/react-native-init.yml
        parameters:
          language: $(language)
          configuration: $(configuration)
          platform: $(platform)
          additionalInitArguments: --useWinUI3 true
          continueOnBuildFailure: true # See issue #6129
          projectType: app

  - job: CliInitHermes
    variables:
      - template: variables/vs2019.yml
    displayName: Verify react-native init Hermes
    strategy:
      matrix:
        X64DebugCpp:
          language: cpp
          configuration: Debug
          platform: x64
        X86ReleaseCpp:
          language: cpp
          configuration: Release
          platform: x86
    timeoutInMinutes: 50 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    pool:
      vmImage: $(VmImage)
    steps:
      - template: templates/react-native-init.yml
        parameters:
          language: $(language)
          configuration: $(configuration)
          platform: $(platform)
          additionalInitArguments: --useHermes
          projectType: app

  - job: CliInitExperimental
    variables:
      - template: variables/vs2019.yml
    displayName: Verify react-native init experimental
    dependsOn:
     - RNWUniversalPR
    condition: in(dependencies.RNWUniversalPR.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
    timeoutInMinutes: 40 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    pool:
      vmImage: $(VmImage)
    strategy:
      matrix:
        cpp:
          Language: cpp
        cs:
          Language: cs
    steps:
      - template: templates/react-native-init.yml
        parameters:
          language: $(Language)
          configuration: Debug
          platform: x86
          projectType: app
          useNuGet: true

  - job: JSChecks
    variables:
      - template: variables/vs2019.yml
    displayName: JavaScript Checks
    pool:
      vmImage: $(VmImage)
    timeoutInMinutes: 30 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    steps:
      - checkout: self # self represents the repo where the initial Pipelines YAML file was found
        clean: true # whether to fetch clean each time
        fetchDepth: 2 # the depth of commits to ask Git to fetch
        lfs: false # whether to download Git-LFS files
        submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

      - template: templates/yarn-install.yml

      - task: CmdLine@2
        displayName: Check for change files
        inputs:
          script: npx --no-install beachball check --branch origin/$(System.PullRequest.TargetBranch) --changehint "Run `yarn change` from root of repo to generate a change file."

      - task: CmdLine@2
        displayName: yarn build
        inputs:
          script: yarn build

      - task: CmdLine@2
        displayName: yarn format:verify
        inputs:
          script: yarn format:verify

      - task: CmdLine@2
        displayName: yarn lint
        inputs:
          script: yarn lint

      - task: CmdLine@2
        displayName: yarn test
        inputs:
          script: yarn test

      - task: CmdLine@2
        displayName: yarn validate-overrides
        inputs:
          script: yarn validate-overrides

      # Run unbroken checking local files before installing packages to avoid scanning node_modules
      # The exclusions of unbroken don't support wildcards yet and we have many throughout the repo
      - task: CmdLine@2
        displayName: check local links in .md files
        inputs:
          script: npx unbroken -q --local-only --allow-local-line-sections

      # This runs will check for web-links. If broken links are found, since external changes could affect this.
      # It will report a warning if this step fails so we'll pay attention to fix quickly.
      - task: CmdLine@2
        displayName: check web links in .md files
        inputs:
          script: npx unbroken -q --allow-local-line-sections
        continueOnError: true

  - job: PackDesktop
    variables:
      - template: variables/vs2019.yml
    displayName: Pack Desktop NuGet Package
    dependsOn:
      - RNWDesktopPR
      - RNWUniversalPR # Needed to have artifacts uploaded from LayoutHeaders
    pool:
      vmImage: $(VmImage)
    timeoutInMinutes: 30 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    steps:
      - checkout: self # self represents the repo where the initial Pipelines YAML file was found
        clean: true # whether to fetch clean each time
        fetchDepth: 2 # the depth of commits to ask Git to fetch
        lfs: false # whether to download Git-LFS files
        submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

      - task: NuGetToolInstaller@0
        inputs:
          versionSpec: ">=5.8.0"

      - template: templates/prep-and-pack-nuget.yml
        parameters:
          packDesktop: true
          packMicrosoftReactNative: false
          packMicrosoftReactNativeCxx: false
          packMicrosoftReactNativeManaged: false
          packMicrosoftReactNativeManagedCodeGen: false
          slices: '("x64.Debug", "x64.Release", "x86.Debug", "ARM64.Debug")'

  - template: templates/e2e-test-job.yml
    parameters:
      name: E2ETest
      BuildPlatform: x64

  - template: templates/integration-test-job.yml
    parameters:
      name: IntegrationTest
      BuildPlatform: x64

  - template: templates/macos-tests-job.yml
    parameters:
      name: MacTests
