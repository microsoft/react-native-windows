diff --git a/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsCpp.js b/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsCpp.js
index 4019da0..eb16844 100644
--- a/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsCpp.js
+++ b/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsCpp.js
@@ -40,6 +40,7 @@ namespace react {
 
 const componentTemplate = `
 ::_CLASSNAME_::::::_CLASSNAME_::(
+    const PropsParserContext &context,
     const ::_CLASSNAME_:: &sourceProps,
     const RawProps &rawProps):::_EXTEND_CLASSES_::
 
@@ -51,7 +52,7 @@ function generatePropsString(componentName        , component                ) {
   return component.props
     .map(prop => {
       const defaultValue = convertDefaultTypeToString(componentName, prop);
-      return `${prop.name}(convertRawProp(rawProps, "${prop.name}", sourceProps.${prop.name}, {${defaultValue}}))`;
+      return `${prop.name}(convertRawProp(context, rawProps, "${prop.name}", sourceProps.${prop.name}, {${defaultValue}}))`;
     })
     .join(',\n' + '    ');
 }
@@ -65,7 +66,7 @@ function getClassExtendString(component)         {
           case 'ReactNativeBuiltInType':
             switch (extendProps.knownTypeName) {
               case 'ReactNativeCoreViewProps':
-                return 'ViewProps(sourceProps, rawProps)';
+                return 'ViewProps(context, sourceProps, rawProps)';
               default:
                 (extendProps.knownTypeName       );
                 throw new Error('Invalid knownTypeName');
@@ -90,6 +91,7 @@ module.exports = {
     const fileName = 'Props.cpp';
     const allImports              = new Set([
       '#include <react/renderer/core/propsConversions.h>',
+      '#include <react/renderer/core/PropsParserContext.h>'
     ]);
 
     const componentProps = Object.keys(schema.modules)
diff --git a/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsH.js b/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsH.js
index f180b8a..b866d98 100644
--- a/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsH.js
+++ b/node_modules/react-native-tscodegen/lib/rncodegen/src/generators/components/GeneratePropsH.js
@@ -60,7 +60,7 @@ const classTemplate = `
 class ::_CLASSNAME_:: final::_EXTEND_CLASSES_:: {
  public:
   ::_CLASSNAME_::() = default;
-  ::_CLASSNAME_::(const ::_CLASSNAME_:: &sourceProps, const RawProps &rawProps);
+  ::_CLASSNAME_::(const PropsParserContext& context, const ::_CLASSNAME_:: &sourceProps, const RawProps &rawProps);
 
 #pragma mark - Props
 
@@ -71,7 +71,7 @@ class ::_CLASSNAME_:: final::_EXTEND_CLASSES_:: {
 const enumTemplate = `
 enum class ::_ENUM_NAME_:: { ::_VALUES_:: };
 
-static inline void fromRawValue(const RawValue &value, ::_ENUM_NAME_:: &result) {
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_ENUM_NAME_:: &result) {
   auto string = (std::string)value;
   ::_FROM_CASES_::
   abort();
@@ -87,7 +87,7 @@ static inline std::string toString(const ::_ENUM_NAME_:: &value) {
 const intEnumTemplate = `
 enum class ::_ENUM_NAME_:: { ::_VALUES_:: };
 
-static inline void fromRawValue(const RawValue &value, ::_ENUM_NAME_:: &result) {
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_ENUM_NAME_:: &result) {
   assert(value.hasType<int>());
   auto integerValue = (int)value;
   switch (integerValue) {::_FROM_CASES_::
@@ -106,7 +106,7 @@ const structTemplate = `struct ::_STRUCT_NAME_:: {
   ::_FIELDS_::
 };
 
-static inline void fromRawValue(const RawValue &value, ::_STRUCT_NAME_:: &result) {
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_STRUCT_NAME_:: &result) {
   auto map = (better::map<std::string, RawValue>)value;
 
   ::_FROM_CASES_::
@@ -117,23 +117,23 @@ static inline std::string toString(const ::_STRUCT_NAME_:: &value) {
 }
 `.trim();
 
-const arrayConversionFunction = `static inline void fromRawValue(const RawValue &value, std::vector<::_STRUCT_NAME_::> &result) {
+const arrayConversionFunction = `static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<::_STRUCT_NAME_::> &result) {
   auto items = (std::vector<RawValue>)value;
   for (const auto &item : items) {
     ::_STRUCT_NAME_:: newItem;
-    fromRawValue(item, newItem);
+    fromRawValue(context, item, newItem);
     result.emplace_back(newItem);
   }
 }
 `;
 
-const doubleArrayConversionFunction = `static inline void fromRawValue(const RawValue &value, std::vector<std::vector<::_STRUCT_NAME_::>> &result) {
+const doubleArrayConversionFunction = `static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<std::vector<::_STRUCT_NAME_::>> &result) {
   auto items = (std::vector<std::vector<RawValue>>)value;
   for (const std::vector<RawValue> &item : items) {
     auto nestedArray = std::vector<::_STRUCT_NAME_::>{};
     for (const RawValue &nestedItem : item) {
       ::_STRUCT_NAME_:: newItem;
-      fromRawValue(nestedItem, newItem);
+      fromRawValue(context, nestedItem, newItem);
       nestedArray.emplace_back(newItem);
     }
     result.emplace_back(nestedArray);
@@ -166,7 +166,7 @@ constexpr void operator|=(
   lhs = lhs | static_cast<::_ENUM_MASK_::>(rhs);
 }
 
-static inline void fromRawValue(const RawValue &value, ::_ENUM_MASK_:: &result) {
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_ENUM_MASK_:: &result) {
   auto items = std::vector<std::string>{value};
   for (const auto &item : items) {
     ::_FROM_CASES_::
@@ -460,6 +460,9 @@ function getExtendsImports(
 )              {
   const imports              = new Set();
 
+  imports.add('#include <react/renderer/core/PropsParserContext.h>');
+
+
   extendsProps.forEach(extendProps => {
     switch (extendProps.type) {
       case 'ReactNativeBuiltInType':
@@ -733,7 +736,7 @@ function generateStruct(
       const variable = property.name;
       return `auto ${variable} = map.find("${property.name}");
   if (${variable} != map.end()) {
-    fromRawValue(${variable}->second, result.${variable});
+    fromRawValue(context, ${variable}->second, result.${variable});
   }`;
     })
     .join('\n  ');
